<script type="text/x-template" id="pckg-maestro-table-config-{{ table }}">
    {% embed 'Pckg/Generic/View/modal.twig' with {'close': true, 'id': 'pckgMaestroTableConfigModal', 'class': 'modal-lg', 'minHeight': '240px'} %}
        {% block header %}
            Change list view
        {% endblock %}
        {% block body %}
            <p v-if="fetching">Fetching data, please wait</p>
            <p><b>Filtering:</b></p>
            <p>All fields can be filtered by arithmetic operators. Examples: price < 300, created_at >= 2017-01-01, ...
            <ul>
                <li>&lt; - record value is lower than filter value</li>
                <li>&lt;= - record value is lower or the same as filter value</li>
                <li>= - record value is the same as filter value</li>
                <li>&gt;= - record value is greater or the same as filter value</li>
                <li>&gt; - record value is greater than filter value</li>
                <li>NOT - record value doesn't match filter value</li>
            </ul>
            <p>Additionally, you can filter fields with collection operators like IN and NOT IN, separated by comma.
                Examples:
            <ul>
                <li>IN - record value is found in one of filter values</li>
                <li>NOT IN - record value is not found in one of filter values</li>
            </ul></p>
            <p>Simple search can be made by using LIKE and NOT LIKE operator, where you replace missing data with %.
                Example: email LIKE %gmail.com, email NOT LIKE %@gnp.si, email LIKE %gmail%, ...
            <ul>
                <li>LIKE - record value matches expression</li>
                <li>NOT LIKE - record value doesn't match expression</li>
            </ul>
            </p>
            <p>Lists / dropdowns with less than 100 records (like order status, payment status, ...) are preloaded.</p>
            <p>Larger lists (like orders, users, ...) are loaded on request.</p>
            <p><b>T00D00:</b>
            <ul>
                <li>Between operator (price between 100 and 1000)</li>
                <li>Advanced group by</li>
                <li>Multiple filters</li>
                <li>AND / OR conditions</li>
            </ul></p>
            <table class="table table-condensed table-hover table-striped">
                <tr>
                    <th>Visible</th>
                    <th style="display: none;">Position</th>
                    <th>Field</th>
                    <th>Filter</th>
                    <th style="display: none;">Group by</th>
                    <th>Order</th>
                </tr>
                <tr v-for="field in fields">
                    {% include '_tabelize_config_row.twig' with {'type': 'field'} %}
                </tr>
                <tr>
                    <th>Visible</th>
                    <th style="display: none;">Position</th>
                    <th>Relation</th>
                    <th>Filter</th>
                    <th style="display: none;"></th>
                    <th></th>
                </tr>
                <tr v-for="relation in relations">
                    {% include '_tabelize_config_row.twig' with {'type': 'relation'} %}
                </tr>
            </table>
        {% endblock %}
        {% block footer %}
            <button type="button" class="btn btn-success" @click.prevent="save">Save</button>
        {% endblock %}
    {% endembed %}

</script>

<script type="text/javascript">
    data.fields = [];
    data.relations = [];
    data.directions = [];
    data.filterMethods = [];

    Vue.component('pckg-maestro-table-config-{{ table }}', {
        name: 'pckg-maestro-table-config-{{ table }}',
        template: '#pckg-maestro-table-config-{{ table }}',
        data: function () {
            return {
                fields: [],
                relations: [],
                directions: [],
                filterMethods: [],
                fetching: false
            };
        },
        methods: {
            openModal: function () {
                $("#pckgMaestroTableConfigModal").modal('show');
                //if (this.fields.length == 0) {
                this.fetchData();
                //}
            },
            fetchData: function () {
                this.fetching = true;
                http.getJSON(window.location.href + '/configure', function (data) {
                    var keys = [
                        'fields', 'relations', 'filterMethods', 'directions'
                    ];
                    $.each(keys, function (i, key) {
                        this.$set(key, data[key]);
                    }.bind(this));

                    this.$set('appliedRelations', this.addRelationFilterToAppliedRelations(this.appliedRelationFilters, this.relationFilters));
                    this.fetching = false;
                }.bind(this));
            },
            save: function () {
                var data = {
                    fields: {
                        visible: [],
                        filters: [],
                        groups: [],
                        sorts: []
                    },
                    relations: {
                        visible: [],
                        filters: [],
                        groups: [],
                        sorts: []
                    }
                };
                $.each(this.fields, function (i, field) {
                    if (field.visible) {
                        data.fields.visible.push(field.id);
                    }

                    if (field.filterMethod) {
                        data.fields.filters.push({
                            method: field.filterMethod,
                            value: field.filterValue
                        });
                    }

                    if (field.group) {
                        data.fields.groups.push(field.id);
                    }

                    if (field.sort) {
                        data.fields.sorts.push({
                            field: field.id,
                            direction: field.sort
                        });
                    }
                });
                $.each(this.relations, function (i, relation) {
                    if (relation.visible) {
                        data.visible.push(field.id);
                    }

                    if (relation.filterMethod) {
                        data.relations.filters.push({
                            relation: relation.id,
                            method: relation.filterMethod,
                            value: relation.filterValue,
                            field: relation.filterField
                        });
                    }
                });

                http.post(window.location.href + '/configure', data, function (json) {
                    console.log("ok, saved!");
                });
            },
            // filter
            addRelationFilterToAppliedRelations: function (applied, filters) {
                $.each(applied, function (i, appliedFilter) {
                    $.each(filters, function (j, filter) {
                        if (filter.id == appliedFilter.id) {
                            appliedFilter.relationFilter = filter;
                            return false;
                        }
                    })
                });
                return applied;
            },
            addFilter: function (filter) {
                this.applied.push({
                    field: filter.field,
                    value: null,
                    options: {
                        method: 'equals'
                    }
                });
            },
            addRelationFilter: function (relationFilter) {
                this.appliedRelations.push({
                    id: relationFilter.id,
                    value: null,
                    options: {
                        method: 'equals'
                    },
                    relationFilter: relationFilter
                });
            },
            removeFilter: function (filter) {
                this.applied.$remove(filter);
            },
            removeRelationFilter: function (relationFilter) {
                this.appliedRelations.$remove(relationFilter);
            }
        },
        events: {
            'entity:openConfigureViewModal': function () {
                this.openModal();
            }
        }
    });
</script>