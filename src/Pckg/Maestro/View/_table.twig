<script type="text/x-template" id="pckg-maestro-table-{{ table }}-template">
    <div class="pckg-maestro-tabelize" id="{{ id }}">

        {# Header template and entity actions #}
        {% include '_tabelize_header.twig' %}

        {# Vue.js table template #}
        {% include '_tabelize_table_template.twig' %}

    </div>
</script>

<script type="text/javascript">
    var pckgMaestroActions{{ table }} = Vue.component('pckg-maestro-actions-{{ table }}', pckgMaestroActionsComponent.extend({
        mixins: [pckgDelimiters],
        name: 'pckg-maestro-actions-{{ table }}',
        template: '#pckg-maestro-actions-{{ table }}-template'
    }));

    var pckgMaestroTable{{ table }} = Vue.component('pckg-maestro-table-{{ table }}', pckgMaestroTableComponent.extend({
        name: 'pckg-maestro-table-{{ table }}',
        template: '#pckg-maestro-table-{{ table }}-template',
        mixins: [pckgDelimiters, pckgTimeout],
        methods: {
            recordactionhandler: function (record, action) {
                $dispatcher.$emit('record:' + action, record, record.id, this);
            },
            entityAction: function (action) {
                $dispatcher.$emit('entity:' + action, this.getSelectedRecords(), this);
            },
            getSelectedRecords: function () {
                var selected = [];

                $.each(this.records, function (i, record) {
                    if (this.ids.indexOf(record.id) >= 0) {
                        selected.push(record);
                    }
                }.bind(this));

                return selected;
            },
            togglefield: function (fieldId) {
                if (this.sort.field != fieldId) {
                    this.sort.field = fieldId;
                } else {
                    this.sort.dir = this.sort.dir == 'up'
                        ? 'down'
                        : 'up';
                }
                this.makeSort();
            },
            makeSort: function () {
                var newValue = this.sort;
                /*if (this._sortTimeout) {
                    this._sortTimeout.abort();
                }*/

                this.resetPaginatorUrl({
                    field: newValue.field,
                    dir: newValue.dir
                });

                /*this._sortTimeout = http.getJSON(this.paginator.url, function (data) {
                    this.records = data.records;
                }.bind(this));*/
            },
            setUrlParams: function (params) {
                params = params || {};

                if (params.search) {
                    this.search = params.search;
                }

                if (params.sort) {
                    this.sort.field = params.sort;
                }

                if (params.dir) {
                    this.sort.dir = params.dir;
                }

                if (params.page) {
                    this.paginator.page = params.page;
                }

                if (params.perPage) {
                    this.paginator.perPage = params.perPage;
                }
            },
            getUrlParams: function () {
                var finalParams = {};

                if (this.search.length > 0) {
                    finalParams.search = this.search;
                }

                if (this.sort.dir.length > 0) {
                    finalParams.dir = this.sort.dir;
                }

                if (this.sort.field.length > 0) {
                    finalParams.field = this.sort.field;
                }

                if (this.paginator.page > 0) {
                    finalParams.page = this.paginator.page;
                }

                if (this.paginator.perPage > 0 || this.paginator.perPage == 'all') {
                    finalParams.perPage = this.paginator.perPage;
                }

                if (Object.keys(finalParams).length == 0) {
                    return '';
                }
                return '?' + $.param(finalParams);
            },
            resetPaginatorUrl: function (preset) {
                this.setUrlParams(preset);
                this.paginator.url = '{{ searchUrl }}' + this.getUrlParams();

                this.delaySearch();
            },
            delaySearch: function () {
                this.timeout('search', this.refreshData, 500);
            },
            refreshData: function () {
                this.loading++;
                http.getJSON(this.paginator.url, function (data) {
                    this.records = data.records;
                    this.groups = data.groups;
                    this.setPaginatorTotal(data.paginator.total);
                    this.loading--;
                }.bind(this));
            },
            setRecords: function (records) {
                this.records = records;
            },
            setPaginatorTotal: function (total) {
                $vue.$set(this.paginator, 'total', total);
            }
        },
        watch: {
            search: function (newValue) {
                this.resetPaginatorUrl({
                    search: newValue,
                    page: 1
                });
            },
            ids: function(){
                $dispatcher.$emit('pckg-maestro-table-{{ table }}:setSelectedRecords', this.getSelectedRecords());
            }
        },
        mounted: function () {
            this.refreshData();
            {% if tab %}
            /**
             * @T00D00 - what if we have multiple tables in tab?
             */
            $dispatcher.$on('dynamic-tab-{{ tab.id }}:refresh', this.refreshData);
            // $dispatcher.$emit('dynamic-tab-{{ tab.id }}:refresh');
            {% endif %}
            {% if table %}
            $dispatcher.$on('pckg-maestro-table-{{ table }}:setRecords', this.setRecords);
            $dispatcher.$on('pckg-maestro-table-{{ table }}:setPaginatorTotal', this.setPaginatorTotal);
            $dispatcher.$on('pckg-maestro-table-{{ table }}:refresh', this.refreshData);
            // $dispatcher.$emit('pckg-maestro-table-{{ table }}:refresh');
            {% endif %}
        }
    }));
</script>