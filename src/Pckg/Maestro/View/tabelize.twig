{% import _self as selfMacros %}

{% set table = tabelize.getEntity().getTable() %}

{% set records = tabelize.getRecords() %}
{% set fields = tabelize.getFields() %}
{% set recordActions = tabelize.getRecordActions() %}
{% set entityActions = tabelize.getEntityActions() %}

{% set id = 'pckg-maestro-table-' ~ table ~ '-panel' %}

<div class="pckg-maestro-tabelize" id="{{ id }}">

    {# Header template and entity actions #}
    {% include '_tabelize_header.twig' %}

    {# Vue.js template and script for record actions #}
    {% include '_pckg_maestro_actions.twig' %}

    {# Vue.js table template #}
    {% include '_tabelize_table_template.twig' %}

    <script type="text/javascript">
        console.log('extending pckgMaestroTableComponent with pckg-maestro-table-{{ table }}');
        var pckgMaestroTable{{ table }} = Vue.component('pckg-maestro-table-{{ table }}', pckgMaestroTableComponent.extend({
            name: 'pckg-maestro-table-{{ table }}',
            template: '#pckg-maestro-table-{{ table }}'
        }));

        utils.pushToVue({
            methods: {
                recordactionhandler: function (record, action) {
                    console.log('dispatching record:' + action);

                    this.$dispatch('record:' + action, record.id, record);
                    this.$emit('record:' + action, record.id, record);
                    this.$broadcast('record:' + action, record.id, record);
                }
            },
            watch: {
                search: function (newValue) {
                    if (this.$refs.maestroTable._searchTimeout) {
                        this.$refs.maestroTable._searchTimeout.abort();
                    }

                    this.$refs.maestroTable._searchTimeout = http.getJSON('{{ searchUrl }}?search=' + newValue, function (data) {
                        this.$refs.maestroTable.records = data.records;
                    }.bind(this));
                }
            },
            data: {
                search: null
            }
        });
    </script>

    <!-- pckg-maestro-table -->
    <pckg-maestro-table-{{ table }} v-ref:maestro-table
                                    :records="{{ tabelize.transformRecords() | json_encode | raw | escape('html_attr') }}"
                                    :fields="{{ tabelize.getFields() | json_encode | raw | escape('html_attr') }}"
                                    :depth="{{ tabelize.getGroups() | length }}"
                                    :groups="{{ tabelize.getGroups() | json_encode | raw | escape('html_attr') }}"
                                    :first="1"
                                    :ids="[]"
                                    :search="search"
                                    :entityactions="{{ tabelize.getEntityActions() | json_encode | raw | escape('html_attr') }}"
                                    :paginator="{'perPage':{{ tabelize.getPerPage() }},'page':{{ tabelize.getPage() }},'total':{{ tabelize.getTotal() }}}"
                                    :table="{{ tabelize.getTable() | json_encode | raw | escape('html_attr') }}"
                                    :recordactionhandler="recordactionhandler">
    </pckg-maestro-table-{{ table }}>

    <script type="text/javascript">
        if (false) {
            //console.log('Constructing maestroTable {{ id }}' + ' #' + $('#{{ id }}').closest('[id]').attr('id'));
            var maestroTable = utils.createVue('{{ id }}', {
                //el: '#' + $('#{{ id }}').closest('[id]').attr('id'),
                el: '#{{ id }}',
                data: function () {
                    return {
                        //fields: {{ tabelize.getFields() | json_encode | raw }},
                        //records: {{ tabelize.transformRecords() | json_encode | raw }},
                        //groups: {{ tabelize.getGroups() | json_encode | raw }},
                        //depth: {{ tabelize.getGroups() | length }},
                        //paginator: {
                        //    perPage: {{ tabelize.getPerPage() }},
                        //    page: {{ tabelize.getPage() }},
                        //    total: {{ tabelize.getTotal() }}
                        //},
                        //entityactions: {{ tabelize.getEntityActions() | json_encode | raw }},
                        //table: {{ tabelize.getTable() | json_encode | raw }},
                        //ids: [],
                        //search: null
                    };
                },
                methods: {
                    entityAction: function (action) {
                        console.log('broadcasting and dispatching entity:' + action);
                        this.$broadcast('entity:' + action, this.ids, this.getSelectedRecords());
                        data.$root.$dispatch('entity:' + action, this.ids, this.getSelectedRecords());
                    },
                    getSelectedRecords: function () {
                        var selected = [];

                        $.each(this.records, function (i, record) {
                            if (this.ids.indexOf(record.id) >= 0) {
                                selected.push(record);
                            }
                        }.bind(this));

                        return selected;
                    }
                },
                watch: {
                    search: function (newValue) {
                        if (this.$refs.maestroTable._searchTimeout) {
                            this.$refs.maestroTable._searchTimeout.abort();
                        }

                        this.$refs.maestroTable._searchTimeout = http.getJSON('{{ searchUrl }}?search=' + newValue, function (data) {
                            this.$refs.maestroTable.records = data.records;
                        }.bind(this));
                    }
                }
            });
        }
        /*maestroTable.$on('record:removeFromList', function (record) {
         console.log('dispatched remove');
         $.each(this.records, function (i, val) {
         if (val.id == record.id) {
         this.records.$delete(i);
         return false;
         }
         }.bind(this));
         });*/
    </script>

</div>