{% import _self as selfMacros %}

{% set table = tabelize.getEntity().getTable() %}

{% set records = tabelize.getRecords() %}
{% set fields = tabelize.getFields() %}
{% set recordActions = tabelize.getRecordActions() %}
{% set entityActions = tabelize.getEntityActions() %}

{% set id = 'pckg-maestro-table-' ~ table ~ '-panel' %}
{% set instance = table %}

{# Vue.js template and script for record actions #}
{% include '_pckg_maestro_actions.twig' %}

{# customize view logic #}
{% include '_tabelize_config.twig' %}

<script type="text/x-template" id="pckg-maestro-table-{{ table }}-template">
    <div class="pckg-maestro-tabelize" id="{{ id }}">

        {# Header template and entity actions #}
        {% include '_tabelize_header.twig' %}

        {# Vue.js table template #}
        {% include '_tabelize_table_template.twig' %}

    </div>
</script>

<script type="text/javascript">
    var pckgMaestroTable{{ table }} = Vue.component('pckg-maestro-table-{{ table }}', pckgMaestroTableComponent.extend({
        name: 'pckg-maestro-table-{{ table }}',
        template: '#pckg-maestro-table-{{ table }}-template',
        methods: {
            recordactionhandler: function (record, action) {
                console.log('dispatching record:' + action);

                this.$dispatch('record:' + action, record.id, record);
                this.$emit('record:' + action, record.id, record);
                this.$broadcast('record:' + action, record.id, record);
            },
            entityAction: function (action) {
                console.log('broadcasting and dispatching entity:' + action, this.ids);
                this.$broadcast('entity:' + action, this.ids, this.getSelectedRecords());
                data.$vue.$dispatch('entity:' + action, this.ids, this.getSelectedRecords());
            },
            getSelectedRecords: function () {
                var selected = [];

                $.each(this.records, function (i, record) {
                    if (this.ids.indexOf(record.id) >= 0) {
                        selected.push(record);
                    }
                }.bind(this));

                return selected;
            },
            togglefield: function (fieldId) {
                if (this.sort.field != fieldId) {
                    this.sort.field = fieldId;
                } else {
                    this.sort.dir = this.sort.dir == 'up'
                            ? 'down'
                            : 'up';
                }
                this.makeSort();
            },
            makeSort: function () {
                var newValue = this.sort;
                if (this.$refs.maestroTable._sortTimeout) {
                    this.$refs.maestroTable._sortTimeout.abort();
                }

                this.resetPaginatorUrl({
                    field: newValue.field,
                    dir: newValue.dir
                });

                this.$refs.maestroTable._sortTimeout = http.getJSON(this.paginator.url, function (data) {
                    console.log("make sort");
                    this.records = data.records;
                }.bind(this));
            },
            getUrlParams: function () {
                var params = {};
                if (!params.search && this.search) {
                    params.search = this.search;
                }
                if (!params.sort && this.sort.field) {
                    params.field = this.sort.field;
                    params.dir = this.sort.dir;
                }
                if (!params.page && this.paginator.page) {
                    params.page = this.paginator.page;
                }
                if (!params.perPage && this.paginator.perPage) {
                    params.perPage = this.paginator.perPage;
                }
                if (Object.keys(params).length == 0) {
                    return '';
                }
                return '?' + $.param(params);
            },
            resetPaginatorUrl: function (preset) {
                this.paginator.url = '{{ searchUrl }}' + this.getUrlParams(preset);

                http.getJSON(this.paginator.url, function (data) {
                    this.records = data.records;
                    this.groups = data.groups;
                }.bind(this));
            }
        },
        watch: {
            search: function (newValue) {
                if (this._searchTimeout) {
                    this._searchTimeout.abort();
                }

                this.resetPaginatorUrl({
                    search: newValue,
                    page: 1
                });

                this._searchTimeout = http.getJSON(this.paginator.url, function (data) {
                    this.records = data.records;
                    this.paginator.total = data.paginator.total;
                }.bind(this));
            }
        },
        propsData: {
            search: null,
            records: {{ tabelize.transformRecords() | json_encode | raw }},
            groups: {{ tabelize.getGroups() | json_encode | raw }},
            paginator: {
                perPage: {{ tabelize.getPerPage() }},
                page: {{ tabelize.getPage() }},
                total: {{ tabelize.getTotal() }},
                url: '{{ _router.getUri() }}'
            },
            ids: [],
            sort: {
                field: '',
                dir: 'up'
            }
        },
        data: function () {
            return {
                _searchTimeout: null
            };
        }
    }));
</script>

<!-- pckg-maestro-table -->
<pckg-maestro-table-{{ table }} v-ref:maestro-table
                                :fields="{{ tabelize.getFields() | json_encode | raw | escape('html_attr') }}"
                                :depth="{{ tabelize.getGroups() | length }}"
                                :entityactions="{{ tabelize.getEntityActions() | json_encode | raw | escape('html_attr') }}"
                                :table="{{ tabelize.getTable() | json_encode | raw | escape('html_attr') }}"
                                :first="1"></pckg-maestro-table-{{ table }}>

<pckg-maestro-table-config-{{ table }}></pckg-maestro-table-config-{{ table }}>