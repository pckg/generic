{% import _self as selfMacros %}

{% set table = tabelize.getEntity().getTable() %}

{% set records = tabelize.getRecords() %}
{% set fields = tabelize.getFields() %}
{% set recordActions = tabelize.getRecordActions() %}
{% set entityActions = tabelize.getEntityActions() %}

{% set id = 'pckg-maestro-table-' ~ table ~ '-panel' %}

<div class="pckg-maestro-tabelize" id="{{ id }}">

    <div class="header">
        <h2>
            {{ tabelize.getTitle() | raw }}
            <div class="btn-group btn-group-sm pull-right" role="group" aria-label="..." style="text-align: right;">
                {% for action in tabelize.getEntityActions() %}
                    {% if action.slug and action.entityTemplate %}
                        {% include 'tabelize/entityActions/' ~ action.entityTemplate ~ '.twig' %}
                    {% elseif not action.slug %}
                        {% include 'tabelize/entityActions/' ~ action ~ '.twig' %}
                    {% endif %}
                {% endfor %}
            </div>
        </h2>
    </div>

    <script type="text/x-template" id="pckg-maestro-actions">
        <div class="btn-group btn-group-sm">
            <div type="button" class="btn btn-default">
                {% for action in recordActions %}
                    {% include 'tabelize/recordActions/' ~ (action.template ? action.template : (action.slug ? action.slug : action)) ~ '.twig' %}
                {% endfor %}
            </div>
            {#% if recordActions|length > 1 %#}
            <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown"
                    aria-haspopup="true"
                    aria-expanded="false">
                <span class="caret"></span>
                <span class="sr-only">Toggle Dropdown</span>
            </button>
            <ul class="dropdown-menu dropdown-menu-right">
                {% for action in recordActions %}
                    <li>{% include 'tabelize/recordActions/' ~ (action.template ? action.template : (action.slug ? action.slug : action)) ~ '.twig' %}</li>
                {% endfor %}
            </ul>
            {#% endif %#}
        </div>
    </script>

    <script type="text/javascript">
        var pckgMaestroActions = Vue.component('pckg-maestro-actions', {
            name: 'pckg-maestro-actions',
            template: '#pckg-maestro-actions',
            props: {
                record: {
                    type: Object,
                    required: true
                }
            },
            methods: {
                recordAction: function (record, action) {
                    console.log('dispatching record:' + action);
                    data.$root.$dispatch('record:' + action, record.id, record);
                }
            }
        });
    </script>

    <script type="text/x-template" id="pckg-maestro-table-{{ table }}">
        <div class="pckg-maestro-table-{{ table }}">
            <div v-if="first" style="margin: 1rem auto; max-width: 360px; width: auto;">
                <label>Quick search:</label>
                <input type="text" v-model="search" debounce="500" class="form-control"/>
            </div>
            <table class="table table-condensed table-striped table-hover">
                <template v-if="depth > 0">
                    <tr v-for="(i,record) in records" track-by="$index">
                        <td>
                            <legend>${ groups[depth - 1][i] ? groups[depth - 1][i] : i }</legend>
                            <pckg-maestro-table-{{ table }} :records="record"
                                                            :depth="depth - 1"
                                                            :fields="fields"
                                                            :ids.sync="ids"
                                                            :search.sync="search"
                                                            :groups.sync="groups"
                                                            :paginator.sync="paginator"
                                                            :entityactions.sync="entityactions"
                                                            :table.sync="table"></pckg-maestro-table-{{ table }}>
                        </td>
                    </tr>
                </template>
                <template v-if="depth < 1">
                    <thead>
                    <tr>
                        <th v-for="field in fields" v-bind:class="field.fieldType.slug ? field.fieldType.slug : ''">
                            ${ field.title ? field.title : (field.field ? field.field : field) }
                        </th>
                        <th></th>
                        <th>
                            <input type="checkbox" v-on:click="checkAll"
                                   v-model="allChecked"
                                   value="1"/>
                        </th>
                    </tr>
                    </thead>
                    <tbody>
                    <tr v-for="record in records | filterBy search"
                        v-bind:class="record.tabelizeClass ? record.tabelizeClass : ''">
                        <td v-for="field in fields" v-bind:class="field.fieldType.slug ? field.fieldType.slug : ''">
                            <template v-if="field.fieldType.slug == 'boolean'">
                                <pckg-tabelize-field-boolean :field="field.id"
                                                             :record="record.id"
                                                             :value="record[field.field ? field.field : field]"
                                                             :table="table"
                                                             :url="'{{ url('dynamic.records.field.toggle') }}'"></pckg-tabelize-field-boolean>
                            </template>
                            <template v-if="field.fieldType.slug == 'datetime' && field.isTogglable">
                                <pckg-tabelize-field-datetime :field="field.id"
                                                              :record="record.id"
                                                              :value="record[field.field ? field.field : field]"
                                                              :table="table"
                                                              :min="field.minTogglable"
                                                              :max="field.maxTogglable"
                                                              :url="'{{ url('dynamic.records.field.toggle') }}'"></pckg-tabelize-field-datetime>
                            </template>
                            <template v-if="field.fieldType.slug == 'editor'">
                                <pckg-tabelize-field-editor
                                        :value="record[field.field ? field.field : field]"></pckg-tabelize-field-editor>
                            </template>
                            <template
                                    v-if="!field.id || (field.fieldType.slug != 'boolean' && field.fieldType.slug != 'editor' && (field.fieldType.slug != 'datetime' || !field.isTogglable))">
                                !${ record[field.field ? field.field : field] }
                            </template>
                        </td>
                        <td class="actions">
                            <pckg-maestro-actions :record="record"></pckg-maestro-actions>
                        </td>
                        <td class="checkboxes">
                            <input type="checkbox" v-model="ids" v-bind:value="record.id"/>
                        </td>
                    </tr>
                    </tbody>
                </template>
            </table>
            <div v-if="first">
                <pckg-dynamic-paginator v-ref:maestro-paginator :per-page="paginator.perPage"
                                        :page="paginator.page"
                                        :total="paginator.total"></pckg-dynamic-paginator>
            </div>
        </div>
    </script>

    <script type="text/javascript">
        var pckgMaestroTable{{ table }} = Vue.component('pckg-maestro-table-{{ table }}', pckgMaestroTableComponent.extend({
            name: 'pckg-maestro-table-{{ table }}',
            template: '#pckg-maestro-table-{{ table }}'
        }));
    </script>

    <pckg-maestro-table-{{ table }} v-ref:maestro-table :records="records"
                                    :fields="fields"
                                    :depth="depth"
                                    :groups.sync="groups"
                                    :first="1"
                                    :ids.sync="ids"
                                    :search.sync="search"
                                    :entityactions.sync="entityactions"
                                    :paginator.sync="paginator"
                                    :table.sync="table">
    </pckg-maestro-table-{{ table }}>

    <script type="text/javascript">
        data.maestroFields = {{ tabelize.getFields() | json_encode | raw }};
        data.maestroRecords = {{ tabelize.transformRecords() | json_encode | raw }};
        data.maestroGroups = {{ tabelize.getGroups() | json_encode | raw }};
        data.entityactions = {{ tabelize.getEntityActions() | json_encode | raw }};
        data.maestroTable = {{ tabelize.getTable() | json_encode | raw }};
        data.paginator = {
            perPage: {{ tabelize.getPerPage() }},
            page: {{ tabelize.getPage() }},
            total: {{ tabelize.getTotal() }}
        };

        var maestroTable = new Vue({
            el: '#{{ id }}',
            data: function () {
                return {
                    fields: data.maestroFields,
                    records: data.maestroRecords,
                    groups: data.maestroGroups,
                    depth: data.maestroGroups.length,
                    paginator: data.paginator,
                    entityactions: data.entityactions,
                    table: data.maestroTable,
                    ids: [],
                    search: null
                };
            },
            methods: {
                entityAction: function (action) {
                    console.log('broadcasting and dispatching entity:' + action);
                    this.$broadcast('entity:' + action, this.ids, this.getSelectedRecords());
                    data.$root.$dispatch('entity:' + action, this.ids, this.getSelectedRecords());
                },
                getSelectedRecords: function () {
                    var selected = [];

                    $.each(this.records, function (i, record) {
                        if (this.ids.indexOf(record.id) >= 0) {
                            selected.push(record);
                        }
                    }.bind(this));

                    return selected;
                }
            },
            watch: {
                search: function (newValue) {
                    if (this.$refs.maestroTable._searchTimeout) {
                        this.$refs.maestroTable._searchTimeout.abort();
                    }

                    this.$refs.maestroTable._searchTimeout = http.getJSON(window.location.href + '?search=' + newValue, function (data) {
                        this.$refs.maestroTable.records = data.records;
                    }.bind(this));
                }
            }
        });
    </script>

</div>