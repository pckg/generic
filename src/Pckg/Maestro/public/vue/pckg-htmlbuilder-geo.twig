<script type="text/x-template" id="pckg-htmlbuilder-geo">
    <div class="pckg-htmlbuilder-geo">
        <button type="button" @click.prevent="openMap()" class="btn btn-info btn-md" title="Open map">
            <i class="fa fa-globe" aria-hidden="true"></i>
        </button>

        {% embed 'Pckg/Generic/View/modal.twig' with {'close': true, 'id': 'pckgHtmlbuilderGeoModal'} %}
            {% block header %}
                Select location
            {% endblock %}
            {% block body %}
                <vue-component-gmaps selector="#gmap" id="gmap" theme="base" :search="search" :ref="'gmap'"
                                     center="46.055144;14.512284" :zoom="10"
                                     :locations="locations"></vue-component-gmaps>

                {{ _formService.open() | raw }}
                {{ _formService.addText('search').setAttribute('v-model', 'search').setLabel('Search') | raw }}
                {{ _formService.close() | raw }}
            {% endblock %}
            {% block footer %}
                <button type="button" class="btn btn-success" data-dismiss="modal" @click.prevent="selectAndClose">
                    Select and close
                </button>
            {% endblock %}
        {% endembed %}
    </div>
</script>

<style>
    #gmap {
        height: 400px;
        width: 100%;
    }
</style>

<script>
    var pckgHtmlbuilderGeo = Vue.component('pckg-htmlbuilder-geo', {
        mixins: [pckgDelimiters],
        template: '#pckg-htmlbuilder-geo',
        props: {
            value: {}
        },
        data: function () {
            return {
                search: null
            };
        },
        computed: {
            locations: function () {
                var locations = [];
                if (this.value) {
                    locations.push({geo:this.geoValue});
                }
                return locations;
            },
            geoValue: function () {
                return this.value.split(';');
            }
        },
        methods: {
            openMap: function () {
                var value = $(this.$el).parent().find('input.geo').val();
                if (value) {
                    this.$refs.gmap.setCenter(value);
                }
                this.$refs.gmap.singletonMap();
                $('#pckgHtmlbuilderGeoModal').modal('show');
            },
            selectAndClose: function () {
                var val = this.$refs.gmap.getLocation().geo.join(';');
                /**
                 * Change form's data/model, unit.geo.
                 */
                this.$emit('change', val);
                this.$emit('input', val);
            }
        },
        created: function () {
            this.$nextTick(function () {
                $(this.$el).parent().find('input.geo').on('focus', this.openMap);
            });
        }
    });
</script>