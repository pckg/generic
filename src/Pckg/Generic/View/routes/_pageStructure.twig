<script type="text/x-template" id="pckg-generic-page-structure">
    <div class="pageStructure">
        <div class="form-group">
            <label class="col-md-3">Route</label>
            <div class="col-md-9">
                <select class="form-control" v-model="selectedRoute">
                    <option v-for="route in routes" :value="route.id">${ route.route } - ${ route.title } - ${
                        route.slug }
                    </option>
                </select>
            </div>
        </div>

        {% embed 'Pckg/Generic/View/modal.twig' with {'close': true, 'id': 'pageStructureModal'} %}
            {% block header %}
                Add action
            {% endblock %}
            {% block body %}
                {{ actionMorphForm | raw }}
            {% endblock %}
        {% endembed %}
        {% embed 'Pckg/Generic/View/modal.twig' with {'close': true, 'id': 'changeContentModal'} %}
            {% block header %}
                Change content
            {% endblock %}
            {% block body %}
                <div class="form-horizontal">
                    <div class="form-group">
                        <label class="col-md-3">Actions</label>
                        <div class="col-md-9">
                            <select class="form-control" v-model="actionsMorph.action_id">
                                <option v-for="action in actions" :value="action.id">${ action.class } @ ${
                                    action.method }
                                </option>
                            </select>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-3">Bind</label>
                        <div class="col-md-9">
                            Some objects
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-3">Template</label>
                        <div class="col-md-9">
                            <select class="form-control">
                                <option value="default">Default</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-3">Background</label>
                        <div class="col-md-9">
                            <select class="form-control" v-model="actionsMorph.background">
                                <option v-for="background in backgrounds" :value="background.slug">${ background.slug
                                    }
                                </option>
                            </select>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-3">Width</label>
                        <div class="col-md-9">
                            <select class="form-control" v-model="actionsMorph.width">
                                <option v-for="width in widths" :value="width.slug">${ width.slug }</option>
                            </select>
                        </div>
                    </div>
                </div>
            {% endblock %}
            {% block footer %}
                <button class="btn btn-success" @click="saveActionsMorph">Save action</button>
            {% endblock %}
        {% endembed %}

        {% embed 'Pckg/Generic/View/modal.twig' with {'close': true, 'id': 'deleteActionModal'} %}
            {% block header %}
                Delete action
            {% endblock %}
            {% block body %}
                Do you really want to remove action?
            {% endblock %}
            {% block footer %}
                <button class="btn btn-danger" @click="deleteActionsMorph">Yes, delete it</button>
            {% endblock %}
        {% endembed %}

        {% embed 'Pckg/Generic/View/modal.twig' with {'close': true, 'id': 'setPermissionsModal'} %}
            {% block header %}
                Set permissions for ${ action.class } @ ${ action.method }
            {% endblock %}
            {% block body %}
                <table v-if="action.id">
                    <tr>
                        <th>User group</th>
                        <th>Read</th>
                    </tr>
                    <tbody>
                    <tr v-for="userGroup in userGroups">
                        <td>${ userGroup.title }</td>
                        <td><input type="checkbox" :value="userGroup.id" v-model="action.pivot.permissions"/></td>
                    </tr>
                    </tbody>
                </table>
            {% endblock %}
            {% block footer %}
                <button class="btn btn-success" @click="savePermissions">Save permissions</button>
            {% endblock %}
        {% endembed %}
        <div v-for="variable in variables" v-if="route.id">
            <h3>${ variable.slug }</h3>

            {% embed 'Pckg/Generic/View/panel.twig' %}
                {% block content %}
                    <a href="#" class="btn btn-default btn-xs pull-right" @click.prevent="addAction">
                        <i class="fa fa-plus"></i>
                    </a>
                    <table class="table table-condensed">
                        <tr v-for="act in getActionsForVariable(variable)">
                            <td>
                                <i v-if="act.pivot.morph_id == 'Pckg\\Generic\\Entity\\Layout'" class="fa fa-lock"></i>
                                ${ act.class } @ ${ act.method }
                            </td>
                            <td>
                                <input type="number" class="form-control narrow" v-model="act.pivot.order"
                                       @change="timeoutUpdateActionOrder(act)"/>
                            </td>
                            <td>
                                <div class="btn-group pull-right" role="group" aria-label="...">
                                    <div class="btn-group" role="group">
                                        <button type="button" class="btn btn-default btn-xs dropdown-toggle"
                                                data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            Options
                                            <span class="caret"></span>
                                        </button>
                                        <ul class="dropdown-menu">
                                            <template v-if="act.pivot.morph_id == 'Pckg\\Generic\\Entity\\Routes'">
                                                <li>
                                                    <a href="#" @click.prevent="openSetPermissionsModal(act)">Set
                                                        permissions</a>
                                                </li>
                                                <li>
                                                    <a href="#" @click.prevent="openChangeActionModal(act)">Change
                                                        content</a>
                                                </li>
                                                <li>
                                                    <a href="#" @click.prevent="openDeleteActionModal(act)">Delete
                                                        action</a>
                                                </li>
                                            </template>
                                            <template v-else>
                                                <li><a href="#">Edit layout</a></li>
                                            </template>
                                        </ul>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    </table>
                {% endblock %}
            {% endembed %}
        </div>
    </div>
</script>

<script>
    Vue.component('pckg-generic-page-structure', {
        mixins: [pckgDelimiters, pckgTimeout],
        template: '#pckg-generic-page-structure',
        data: function () {
            return {
                actions: [],
                routes: [],
                selectedRoute: null,
                route: {},
                routeActions: [],
                layout: {},
                layoutActions: [],
                variables: [],
                userGroups: [
                    {
                        id: 1,
                        title: 'Superadmin'
                    },
                    {
                        id: 2,
                        title: 'User'
                    },
                    {
                        id: 3,
                        title: 'Admin'
                    },
                    {
                        id: null,
                        title: 'Guest'
                    }
                ],
                action: {},
                actionsMorph: {},
                backgrounds: {{ backgrounds.toJSON() | raw }},
                widths: {{ widths.toJSON() | raw }},
                form: {
                    action_id: null,
                    content_id: null,
                    template: null
                }
            };
        },
        methods: {
            fetchRoutes: function () {
                http.getJSON('{{ url('pckg.generic.pageStructure.getRoutes') }}', function (data) {
                    this.routes = data.routes;
                }.bind(this));
            },
            fetchVariables: function () {
                http.getJSON('{{ url('pckg.generic.pageStructure.getVariables') }}', function (data) {
                    this.variables = data.variables;
                }.bind(this));
            },
            fetchActions: function () {
                http.getJSON('{{ url('pckg.generic.pageStructure.getActions') }}', function (data) {
                    this.actions = data.actions;
                }.bind(this));
            },
            fetchRoute: function () {
                http.getJSON(utils.url('{{ url('pckg.generic.pageStructure.getRoute') }}', {route: this.selectedRoute}), function (data) {
                    this.route = data.route;
                    this.fetchRouteActions();
                    this.fetchLayoutActions();
                }.bind(this));
            },
            fetchRouteActions: function () {
                http.getJSON(utils.url('{{ url('pckg.generic.pageStructure.getRouteActions') }}', {route: this.route.id}), function (data) {
                    this.routeActions = data.routeActions;
                }.bind(this));
            },
            fetchLayoutActions: function () {
                http.getJSON(utils.url('{{ url('pckg.generic.pageStructure.getLayoutActions') }}', {layout: this.route.layout_id}), function (data) {
                    this.layoutActions = data.layoutActions;
                }.bind(this));
            },
            getActionsForVariable: function (variable) {
                var actions = [];

                $.each(this.routeActions.filter(function (item) {
                    return variable.id == item.pivot.variable_id;
                }), function (i, action) {
                    actions.push(action);
                });

                $.each(this.layoutActions.filter(function (item) {
                    return variable.id == item.pivot.variable_id;
                }), function (i, action) {
                    actions.push(action);
                });

                return actions.sort(function (action) {
                    return action.pivot.order;
                })
            },

            addAction: function () {
                $('#pageStructureModal').modal('show');
            },
            openDeleteActionModal: function (action) {
                this.action = action;

                $('#deleteActionModal').modal('show');
            },
            openChangeActionModal: function (action) {
                this.action = action;
                this.actionsMorph = action.pivot;

                $('#changeContentModal').modal('show');
            },
            openSetPermissionsModal: function (action) {
                console.log(this.action);
                this.action = action;
                console.log(this.action);

                Vue.nextTick(function () {
                    $('#setPermissionsModal').modal('show');
                });
            },
            onSubmit: function () {
                var postData = this.form;
                postData.route_id = this.route.id;
                postData.variable_id = this.variable.id;
                http.post('{{ url('pckg.generic.pageStructure.addActionsMorph') }}', postData, function (data) {
                    $dispatcher.$emit('notification:success', 'Action successfully added');
                    $('#pageStructureModal').modal('hide');
                    $dispatcher.$emit('record:actionsMorph:add:action', data.action);
                });
            },
            savePermissions: function () {
                http.post(utils.url('{{ url('pckg.generic.pageStructure.setActionsMorphPermissions') }}',
                    {actionsMorph: this.action.pivot.id}),
                    {
                        read: this.action.pivot.permissions
                    },
                    function (data) {
                        if (data.success) {
                            $('#setPermissionsModal').modal('hide');
                        }
                    }.bind(this));
            },
            deleteActionsMorph: function () {
                var action = this.action;
                http.deleteJSON(utils.url('{{ url('pckg.generic.pageStructure.actionsMorph') }}', {actionsMorph: action.pivot.id}), function (data) {
                    if (data.success) {
                        $('#deleteActionModal').modal('hide');
                        $dispatcher.$emit('record:actionsMorph:remove:action', action);
                    }
                });
            },
            saveActionsMorph: function () {
                http.post(
                    utils.url('{{ url('pckg.generic.pageStructure.actionsMorph') }}', {actionsMorph: this.action.pivot.id}),
                    {
                        action_id: this.actionsMorph.action_id,
                        template: this.actionsMorph.template,
                        width: this.actionsMorph.width,
                        background: this.actionsMorph.background,
                    },
                    function (data) {
                        if (data.success) {
                            $('#changeContentModal').modal('hide');
                        }
                    });
            },
            updateActionOrder: function (action) {
                http.post(
                    utils.url('{{ url('pckg.generic.pageStructure.actionsMorph') }}', {actionsMorph: action.pivot.id}),
                    {
                        order: action.pivot.order
                    });
            },
            timeoutUpdateActionOrder: function (action) {
                this.timeout('updateActionOrder' + action.pivot.id, function () {
                    this.updateActionOrder(action);
                }.bind(this), 333);
            }
        },
        created: function () {
            this.fetchRoutes();
            this.fetchActions();
            this.fetchVariables();

            $dispatcher.$on('record:actionsMorph:remove:action', function (action) {
                this.routeActions.splice(action, 1);
            }.bind(this));

            $dispatcher.$on('record:actionsMorph:add:action', function (action) {
                this.routeActions.push(action);
            }.bind(this));
        },
        watch: {
            selectedRoute: function () {
                this.fetchRoute();
            }
        }
    });
</script>