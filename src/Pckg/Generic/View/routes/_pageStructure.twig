<script type="text/x-template" id="pckg-generic-page-structure">
    <div class="pageStructure">
        <div class="form-group">
            <label class="col-md-3">Route</label>
            <div class="col-md-9">
                <select class="form-control" v-model="selectedRoute">
                    <option v-for="route in routes" :value="route.id">${ route.route } - ${ route.title } - ${
                        route.slug }
                    </option>
                </select>
            </div>
        </div>

        {% embed 'Pckg/Generic/View/modal.twig' with {'close': true, 'id': 'pageStructureModal', 'class': 'modal-lg'} %}
            {% block header %}
                Add action
            {% endblock %}
            {% block body %}
                <div class="page-structure-actions">
                    <div class="item" v-for="a in actions">
                        <a href="#" @click.prevent="pushAction(a)">
                            <span class="title">${ a.title ? a.title : a.slug }</span>
                            <span class="description">${ a.description }</span>
                        </a>
                    </div>
                </div>
            {% endblock %}
        {% endembed %}

        {% embed 'Pckg/Generic/View/modal.twig' with {'close': true, 'id': 'deleteActionModal'} %}
            {% block header %}
                Delete action
            {% endblock %}
            {% block body %}
                Do you really want to remove action?
            {% endblock %}
            {% block footer %}
                <button class="btn btn-danger" @click="deleteActionsMorph">Yes, delete it</button>
            {% endblock %}
        {% endembed %}

        <div v-for="variable in variables" v-if="route.id" class="variable">
            <h3>${ variable.slug }</h3>

            <pckg-generic-pageVariable :variable="variable"></pckg-generic-pageVariable>
        </div>
    </div>
</script>

<script type="text/x-template" id="pckg-generic-pageWrapper">
    <div class="pckg-generic-pageWrapper">
        <ul class="nav nav-tabs" role="tablist">
            <li role="presentation">
                <a href="#" class="move-handle move-handle-wrapper" @click.prevent>
                    <i class="fa fa-arrows"></i>
                </a>
            </li>
            <li role="presentation" class="active">
                <a :href="'#home' + action.pivot.id" aria-controls="home" role="tab"
                   data-toggle="tab">
                    container
                </a>
            </li>
            <li role="presentation">
                <a :href="'#settings' + action.pivot.id" aria-controls="settings" role="tab"
                   data-toggle="tab"><i
                            class="fa fa-th"></i></a>
            </li>
            <li role="presentation">
                <a :href="'#advanced' + action.pivot.id" aria-controls="advanced" role="tab"
                   data-toggle="tab"><i
                            class="fa fa-wrench"></i></a>
            </li>
            <li role="presentation">
                <a href="#" class="dropdown-toggle" data-toggle="dropdown" aria-controls="myTabDrop1-contents"
                   aria-expanded="false"><i class="fa fa-plus"></i></a>
                <ul class="dropdown-menu">
                    <li>
                        <a href="#" @click.prevent="addContainer(action)">Add container</a>
                    </li>
                </ul>
            </li>
        </ul>

        <div class="tab-content">
            <div role="tabpanel" class="tab-pane active" :id="'home' + action.pivot.id">
                <draggable v-model="action.actions" :options="{handle:'.move-handle-row',group:'row'}"
                           @end="onEnd($event, action)">
                    <pckg-generic-pageContainer v-for="action in action.actions" :key="action.pivot.id"
                                                :action="action"></pckg-generic-pageContainer>
                </draggable>
            </div>
            <div role="tabpanel" class="tab-pane" :id="'settings' + action.pivot.id">
                <div class="form-horizontal">
                    <div class="form-group">
                        <label class="col-md-3">Container</label>
                        <div class="col-md-9">
                            <select class="form-control" v-model="action.pivot.container"
                                    @change="saveActionsMorph(action.pivot)">
                                <option>normal - .container</option>
                                <option>fluid - .container-fluid</option>
                            </select>
                        </div>
                    </div>
                </div>
                {% include '_pageStructure-background.twig' %}
            </div>
            <div role="tabpanel" class="tab-pane" :id="'advanced' + action.pivot.id">
                Advanced
            </div>
        </div>
    </div>
</script>

<script type="text/x-template" id="pckg-generic-pageContainer">
    <div class="pckg-generic-pageContainer">
        <ul class="nav nav-tabs" role="tablist">
            <li role="presentation">
                <a href="#" class="move-handle move-handle-container" @click.prevent>
                    <i class="fa fa-arrows"></i>
                </a>
            </li>
            <li role="presentation" class="active">
                <a :href="'#home' + action.pivot.id" aria-controls="home" role="tab"
                   data-toggle="tab">
                    container
                </a>
            </li>
            <li role="presentation">
                <a :href="'#settings' + action.pivot.id" aria-controls="settings" role="tab"
                   data-toggle="tab"><i
                            class="fa fa-th"></i></a>
            </li>
            <li role="presentation">
                <a :href="'#advanced' + action.pivot.id" aria-controls="advanced" role="tab"
                   data-toggle="tab"><i
                            class="fa fa-wrench"></i></a>
            </li>
            <li role="presentation">
                <a href="#" class="dropdown-toggle" data-toggle="dropdown" aria-controls="myTabDrop1-contents"
                   aria-expanded="false"><i class="fa fa-plus"></i></a>
                <ul class="dropdown-menu">
                    <li>
                        <a href="#" @click.prevent="addRow(action)">Add row</a>
                    </li>
                </ul>
            </li>
        </ul>

        <div class="tab-content">
            <div role="tabpanel" class="tab-pane active" :id="'home' + action.pivot.id">
                <draggable v-model="action.actions" :options="{handle:'.move-handle-row',group:'row'}"
                           @end="onEnd($event, action)">
                    <pckg-generic-pageRow v-for="action in action.actions" :key="action.pivot.id"
                                          :action="action"></pckg-generic-pageRow>
                </draggable>
            </div>
            <div role="tabpanel" class="tab-pane" :id="'settings' + action.pivot.id">
                <div class="form-horizontal">
                    <div class="form-group">
                        <label class="col-md-3">Container</label>
                        <div class="col-md-9">
                            <select class="form-control" v-model="action.pivot.container"
                                    @change="saveActionsMorph(action.pivot)">
                                <option>normal - .container</option>
                                <option>fluid - .container-fluid</option>
                            </select>
                        </div>
                    </div>
                </div>
                {% include '_pageStructure-background.twig' %}
            </div>
            <div role="tabpanel" class="tab-pane" :id="'advanced' + action.pivot.id">
                Advanced
            </div>
        </div>
    </div>
</script>

<script type="text/x-template" id="pckg-generic-pageRow">
    <div class="pckg-generic-pageRow">
        <ul class="nav nav-tabs" role="tablist">
            <li role="presentation">
                <a href="#" class="move-handle move-handle-row" @click.prevent>
                    <i class="fa fa-arrows"></i>
                </a>
            </li>
            <li role="presentation" class="active">
                <a :href="'#home' + action.pivot.id" aria-controls="home" role="tab"
                   data-toggle="tab">
                    row
                </a>
            </li>
            <li role="presentation">
                <a :href="'#settings' + action.pivot.id" aria-controls="settings" role="tab"
                   data-toggle="tab"><i
                            class="fa fa-th"></i></a>
            </li>
            <li role="presentation">
                <a :href="'#advanced' + action.pivot.id" aria-controls="advanced" role="tab"
                   data-toggle="tab"><i
                            class="fa fa-wrench"></i></a>
            </li>
            <li role="presentation">
                <a href="#" class="dropdown-toggle" data-toggle="dropdown" aria-controls="myTabDrop1-contents"
                   aria-expanded="false"><i class="fa fa-plus"></i></a>
                <ul class="dropdown-menu">
                    <li>
                        <a href="#" @click.prevent="addColumn(action)">Add column</a>
                    </li>
                </ul>
            </li>
        </ul>

        <div class="tab-content">
            <div role="tabpanel" class="tab-pane active" :id="'home' + action.pivot.id">
                <draggable v-model="action.actions" :options="{handle:'.move-handle-column',group:'column'}"
                           @end="onEnd($event, action)">
                    <pckg-generic-pageColumn v-for="action in action.actions"
                                             :key="action.pivot.id"
                                             :action="action"></pckg-generic-pageColumn>
                </draggable>
            </div>
            <div role="tabpanel" class="tab-pane" :id="'settings' + action.pivot.id">
                <div class="form-horizontal">
                    <div class="form-group">
                        <label class="col-md-3">Padding</label>
                        <div class="col-md-9">
                            <select class="form-control" v-model="action.pivot.container"
                                    @change="saveActionsMorph(action.pivot)">
                                <option>normal</option>
                                <option>no - .no-padding</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
            <div role="tabpanel" class="tab-pane" :id="'advanced' + action.pivot.id">
                Advanced
            </div>
        </div>
    </div>
</script>

<script type="text/x-template" id="pckg-generic-pageColumn">
    <div class="pckg-generic-pageColumn">
        <ul class="nav nav-tabs" role="tablist">
            <li role="presentation">
                <a href="#" class="move-handle move-handle-column" @click.prevent>
                    <i class="fa fa-arrows"></i>
                </a>
            </li>
            <li role="presentation" class="active">
                <a :href="'#home' + action.pivot.id" aria-controls="home" role="tab"
                   data-toggle="tab">
                    column
                </a>
            </li>
            <li role="presentation">
                <a :href="'#settings' + action.pivot.id" aria-controls="settings" role="tab"
                   data-toggle="tab"><i
                            class="fa fa-th"></i></a>
            </li>
            <li role="presentation">
                <a :href="'#advanced' + action.pivot.id" aria-controls="advanced" role="tab"
                   data-toggle="tab"><i
                            class="fa fa-wrench"></i></a>
            </li>
            <li role="presentation">
                <a href="#" class="dropdown-toggle" data-toggle="dropdown" aria-controls="myTabDrop1-contents"
                   aria-expanded="false"><i class="fa fa-plus"></i></a>
                <ul class="dropdown-menu">
                    <li>
                        <a href="#" @click.prevent="addAction(action)">Add action</a>
                    </li>
                </ul>
            </li>
        </ul>

        <div class="tab-content">
            <div role="tabpanel" class="tab-pane active" :id="'home' + action.pivot.id">
                <draggable v-model="action.actions" :options="{handle:'.move-handle-action',group:'action'}"
                           @end="onEnd($event, action)">
                    <pckg-generic-pageAction v-for="action in action.actions"
                                             :key="action.pivot.key"
                                             :action="action"></pckg-generic-pageAction>
                </draggable>
            </div>
            <div role="tabpanel" class="tab-pane" :id="'settings' + action.pivot.id">
                <div class="form-horizontal">
                    <div class="form-group">
                        <label class="col-md-3">Width</label>
                        <div class="col-md-9">
                            <select class="form-control" v-model="action.pivot.container"
                                    @change="saveActionsMorph(action.pivot)">
                                <option>col-md-1</option>
                                <option>col-md-2</option>
                                <option>col-md-3</option>
                                <option>col-md-4</option>
                                <option>col-md-5</option>
                                <option>col-md-6</option>
                                <option>col-md-7</option>
                                <option>col-md-8</option>
                                <option>col-md-9</option>
                                <option>col-md-10</option>
                                <option>col-md-11</option>
                                <option>col-md-12</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
            <div role="tabpanel" class="tab-pane" :id="'advanced' + action.pivot.id">
                Advanced
            </div>
        </div>
    </div>
</script>

<script type="text/x-template" id="pckg-generic-pageAction">
    <div class="pckg-generic-pageAction">
        <ul class="nav nav-tabs" role="tablist">
            <li role="presentation">
                <a href="#" class="move-handle move-handle-action" @click.prevent>
                    <i class="fa fa-arrows"></i>
                </a>
            </li>
            <li role="presentation" class="active">
                <a :href="'#home' + action.pivot.id" aria-controls="home" role="tab"
                   data-toggle="tab">
                    <i v-if="action.pivot.morph_id == 'Pckg\\Generic\\Entity\\Layout'"
                       class="fa fa-lock"></i>
                    ${ action.title && action.title.length > 0 ? action.title : action.slug }
                </a>
            </li>
            <li role="presentation">
                <a :href="'#settings' + action.pivot.id" aria-controls="settings" role="tab"
                   data-toggle="tab"><i
                            class="fa fa-th"></i></a>
            </li>
            <li role="presentation">
                <a :href="'#layout' + action.pivot.id" aria-controls="layout" role="tab"
                   data-toggle="tab"><i
                            class="fa fa-cogs"></i></a>
            </li>
            <li role="presentation">
                <a :href="'#permissions' + action.pivot.id" aria-controls="permissions"
                   role="tab"
                   data-toggle="tab"><i
                            class="fa fa-users"></i></a>
            </li>
            <li role="presentation">
                <a :href="'#advanced' + action.pivot.id" aria-controls="advanced" role="tab"
                   data-toggle="tab"><i
                            class="fa fa-wrench"></i></a>
            </li>
        </ul>

        <div class="tab-content">
            <div role="tabpanel" class="tab-pane active" :id="'home' + action.pivot.id">
                <div class="form-horizontal">
                    <div class="form-group">
                        <label class="col-md-3">Content</label>
                        <div class="col-md-9">
                            <select class="form-control" v-model="action.pivot.content_id"
                                    @change="saveActionsMorph(action.pivot)">
                                <option v-for="content in contents"
                                        :value="content.id">#${ content.id } - ${
                                    content.title }
                                </option>
                            </select>
                        </div>
                    </div>
                </div>
                <button v-if="action.pivot.content_id"
                        @click="openEditContentPopup(action.pivot.content_id)"
                        class="btn btn-primary">
                    Edit content
                </button>

                <div class="form-horizontal">
                    <div class="form-group" v-if="getActionTemplates(action.id).length > 0">
                        <label class="col-md-3">Template</label>
                        <div class="col-md-9">
                            <select class="form-control" v-model="action.pivot.template"
                                    @change="saveActionsMorph(action.pivot)">
                                <option v-for="template in getActionTemplates(action.id)"
                                        :value="template">${ template }
                                </option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
            <div role="tabpanel" class="tab-pane" :id="'settings' + action.pivot.id">
                Settings ...
            </div>
            <div role="tabpanel" class="tab-pane" :id="'layout' + action.pivot.id">
                <template v-if="action.slug == 'pckg-generic-content-simple'">
                    {{ simpleContentForm | raw }}
                    <button class="btn btn-success" @click="saveActionsMorph">Save settings</button>
                </template>
            </div>
            <div role="tabpanel" class="tab-pane" :id="'permissions' + action.pivot.id">
                <table class="table table-condensed table-hover">
                    <thead>
                    <tr>
                        <th>User group</th>
                        <th>Read</th>
                    </tr>
                    </thead>
                    <tbody>
                    <tr v-for="userGroup in userGroups">
                        <td>${ userGroup.title }</td>
                        <td><input type="checkbox" :value="userGroup.id"
                                   v-model="action.pivot.permissions"/>
                        </td>
                    </tr>
                    </tbody>
                </table>
                <button class="btn btn-success" @click="savePermissions(action.pivot)">Save
                    permissions
                </button>
            </div>
            <div role="tabpanel" class="tab-pane" :id="'advanced' + action.pivot.id">
                <a href="#" @click.prevent="openDeleteActionModal(action)"
                   class="btn btn-danger">Delete
                    action</a>
            </div>
        </div>
    </div>
</script>

<script type="text/x-template" id="pckg-generic-pageVariable">
    <div class="pckg-generic-pageVariable">
        <a href="#" class="btn btn-info btn-block btn-primary" @click.prevent="addWrapper(variable)">
            <i class="fa fa-plus"></i> Add wrapper
        </a>
        <draggable v-model="variable.actions" :options="{handle:'.move-handle-container',group:'container'}"
                   @end="onEnd($event, variable)">
            <div v-for="act in variable.actions" class="action">
                <template v-if="act.pivot.type == 'wrapper'">
                    <pckg-generic-pageWrapper :action="act"></pckg-generic-pageWrapper>
                </template>
                <template v-else-if="act.pivot.type == 'container'">
                    <pckg-generic-pageContainer :action="act"></pckg-generic-pageContainer>
                </template>
                <template v-else-if="act.pivot.type == 'row'">
                    <pckg-generic-pageRow :action="act"></pckg-generic-pageRow>
                </template>
                <template v-else-if="act.pivot.type == 'column'">
                    <pckg-generic-pageColumn :action="act"></pckg-generic-pageColumn>
                </template>
                <template v-else>
                    <pckg-generic-pageAction :action="act"></pckg-generic-pageAction>
                </template>
            </div>
        </draggable>
    </div>
</script>

<script>
    var pageStructureStore = new Vuex.Store({
        state: {
            route: {},
            parent: {},
            contents: [],
            actions: [],
            routes: [],
            variables: [],
            userGroups: [
                {
                    id: 1,
                    title: 'Superadmin'
                },
                {
                    id: 2,
                    title: 'User'
                },
                {
                    id: 3,
                    title: 'Admin'
                },
                {
                    id: null,
                    title: 'Guest'
                }
            ],
            backgrounds: {{ backgrounds.toJSON() | raw }},
            widths: {{ widths.toJSON() | raw }},
            templates: {{ config('pckg.generic.templates') | json_encode | raw }},
        },
        actions: {
            /**
             * Called when adding:
             *  - container to variable
             *  - row to container
             *  - column to row
             */
            addBox: function (store, config) {
                var postData = {
                    parent_id: config.parent,
                    type: config.type,
                    variable_id: config.variable,
                    route_id: store.state.route.id,
                    action_id: config.action
                };

                http.post('{{ url('pckg.generic.pageStructure.addActionsMorph') }}', postData, function (data) {
                    pageStructureStore.dispatch('pushAction', data.action);
                });
            },
            pushAction: function (store, action) {
                action.actions = [];
                if (action.pivot.type == 'wrapper') {
                    $.each(store.state.variables, function (i, variable) {
                        if (variable.id == action.pivot.variable_id) {
                            store.state.variables[i].actions.push(action);
                            store.commit('variables', store.state.variables);
                        }
                    });
                } else if (action.pivot.type == 'container') {
                    $.each(store.state.variables, function (i, variable) {
                        $.each(variable.actions, function (m, wrapper) {
                            if (variable.id == action.pivot.variable_id) {
                                store.state.variables[i].actions[m].actions.push(action);
                                store.commit('variables', store.state.variables);
                            }
                        });
                    });
                } else if (action.pivot.type == 'row') {
                    $.each(store.state.variables, function (i, variable) {
                        $.each(variable.actions, function (m, wrapper) {
                            $.each(wrapper.actions, function (j, container) {
                                if (container.pivot.id == action.pivot.parent_id) {
                                    store.state.variables[i].actions[m].actions[j].actions.push(action);
                                    store.commit('variables', store.state.variables);
                                }
                            });
                        });
                    });
                } else if (action.pivot.type == 'column') {
                    $.each(store.state.variables, function (i, variable) {
                        $.each(variable.actions, function (m, wrapper) {
                            $.each(wrapper.actions, function (j, container) {
                                $.each(container.actions, function (k, row) {
                                    if (row.pivot.id == action.pivot.parent_id) {
                                        store.state.variables[i].actions[m].actions[j].actions[k].actions.push(action);
                                        store.commit('variables', store.state.variables);
                                    }
                                });
                            });
                        });
                    });
                } else if (action.pivot.type == 'action') {
                    $.each(store.state.variables, function (i, variable) {
                        $.each(variable.actions, function (m, wrapper) {
                            $.each(wrapper.actions, function (j, container) {
                                $.each(container.actions, function (k, row) {
                                    $.each(row.actions, function (l, column) {
                                        if (column.pivot.id == action.pivot.parent_id) {
                                            store.state.variables[i].actions[m].actions[j].actions[k].actions[l].actions.push(action);
                                            store.commit('variables', store.state.variables);
                                        }
                                    });
                                });
                            });
                        });
                    });
                } else if (action.pivot.type == 'action') {
                    $.each(store.state.variables, function (i, variable) {
                        $.each(variable.actions, function (m, wrapper) {
                            $.each(wrapper.actions, function (j, container) {
                                $.each(container.actions, function (k, row) {
                                    $.each(row.actions, function (l, column) {
                                        if (column.pivot.id == action.pivot.parent_id) {
                                            store.state.variables[i].actions[m].actions[j].actions[k].actions[l].actions.push(action);
                                            store.commit('variables', store.state.variables);
                                        }
                                    });
                                });
                            });
                        });
                    });
                } else {
                    console.log('unknown action type');
                }
            },
            setParent: function (store, parent) {
                store.commit('parent', parent);
            },
            setRoute: function (store, route) {
                store.commit('route', route);
            },
            addAction: function (store, action) {
                pageStructureStore.state.parent.actions.push(action);
                store.commit('parent', pageStructureStore.state.parent);
            },
            fetchAll: function () {
                pageStructureStore.dispatch('fetchRoutes');
                pageStructureStore.dispatch('fetchActions');
                pageStructureStore.dispatch('fetchVariables');
                pageStructureStore.dispatch('fetchContents');
            },
            fetchRoutes: function (store) {
                http.getJSON('{{ url('pckg.generic.pageStructure.getRoutes') }}', function (data) {
                    store.commit('routes', data.routes);
                }.bind(this));
            },
            fetchVariables: function (store) {
                http.getJSON('{{ url('pckg.generic.pageStructure.getVariables') }}', function (data) {
                    var variables = data.variables;
                    $.each(variables, function (i, variable) {
                        variable.actions = [];
                        variables[i] = variable;
                    });

                    store.commit('variables', variables);
                }.bind(this));
            },
            fetchActions: function (store) {
                http.getJSON('{{ url('pckg.generic.pageStructure.getActions') }}', function (data) {
                    store.commit('actions', data.actions);
                }.bind(this));
            },
            fetchContents: function (store) {
                http.getJSON('{{ url('pckg.generic.pageStructure.getContents') }}', function (data) {
                    store.commit('contents', data.contents);
                }.bind(this));
            },
        },
        mutations: {
            contents: function (state, contents) {
                state.contents = contents;
            },
            actions: function (state, actions) {
                state.actions = actions;
            },
            routes: function (state, routes) {
                state.routes = routes;
            },
            variables: function (state, variables) {
                state.variables = variables;
            },
            parent: function (state, parent) {
                state.parent = parent;
            },
            route: function (state, route) {
                state.route = route;
            }
        },
        getters: {}
    });

    var pageStructureMixin = {
        methods: {
            onEnd: function (event, variable) {
                var orders = {};
                $.each(variable.actions, function (i, action) {
                    if (i <= event.newIndex || i <= event.oldIndex) {
                        orders[action.pivot.id] = i;
                    }
                });
                http.post(utils.url('{{ url('pckg.generic.pageStructure.postActionsMorphsOrders') }}'), {orders: orders}, function (data) {

                });
            },
            pushAction: function (action) {
                pageStructureStore.dispatch('addBox', {
                    type: 'action',
                    variable: null, // @T00D00 - determine variable
                    parent: this.parent.pivot.id,
                    action: action.id
                });

                $('#pageStructureModal').modal('hide');
            }
        },
        computed: {
            contents: function () {
                return this.$store.state.pageStructure.contents;
            },
            widths: function () {
                return this.$store.state.pageStructure.widths;
            },
            backgrounds: function () {
                return this.$store.state.pageStructure.backgrounds;
            },
            templates: function () {
                return this.$store.state.pageStructure.templates;
            },
            userGroups: function () {
                return this.$store.state.pageStructure.userGroups;
            },
            routes: function () {
                return this.$store.state.pageStructure.routes;
            },
            actions: function () {
                return this.$store.state.pageStructure.actions;
            },
            variables: function () {
                return this.$store.state.pageStructure.variables;
            },
            parent: function () {
                return this.$store.state.pageStructure.parent;
            },
            route: function () {
                return this.$store.state.pageStructure.route;
            }
        }
    };

    Vue.component('pckg-generic-pageAction', {
        mixins: [pckgDelimiters, pckgTimeout, pageStructureMixin],
        name: 'pckg-generic-pageAction',
        template: '#pckg-generic-pageAction',
        props: {
            action: {
                type: Object
            }
        },
        methods: {
            getActionTemplates: function (actionId) {
                var action = null;

                $.each(this.actions, function (i, act) {
                    if (act.id == actionId) {
                        action = act;
                        return false;
                    }
                });

                if (!action) {
                    return [];
                }

                if (!this.templates[action.class] || !this.templates[action.class][action.method]) {
                    return [];
                }

                return this.templates[action.class][action.method];
            },
            saveActionsMorph: function (actionsMorph) {
                http.post(
                    utils.url('{{ url('pckg.generic.pageStructure.actionsMorph') }}', {actionsMorph: actionsMorph.id}),
                    {
                        template: actionsMorph.template,
                        width: actionsMorph.width,
                        background: actionsMorph.background,
                        container: actionsMorph.container,
                        content_id: actionsMorph.content_id
                    },
                    function (data) {
                        if (data.success) {
                            $dispatcher.$emit('notification:success', 'Action saved');
                        } else {
                            $dispatcher.$emit('notification:error', 'Error saving action');
                        }
                    });
            },
            openEditContentPopup: function (contentId) {
                $.magnificPopup.open({
                    items: {
                        src: '/dynamic/records/edit/73/' + contentId
                    },
                    type: 'iframe'
                });
            }
        }
    });

    Vue.component('pckg-generic-pageColumn', {
        mixins: [pckgDelimiters, pckgTimeout, pageStructureMixin],
        name: 'pckg-generic-pageColumn',
        template: '#pckg-generic-pageColumn',
        props: {
            action: {
                type: Object
            }
        },
        methods: {
            addAction: function (parent) {
                pageStructureStore.dispatch('setParent', parent);
                $('#pageStructureModal').modal('show');
            }
        }
    });

    Vue.component('pckg-generic-pageRow', {
        mixins: [pckgDelimiters, pckgTimeout, pageStructureMixin],
        name: 'pckg-generic-pageRow',
        template: '#pckg-generic-pageRow',
        props: {
            action: {
                type: Object
            }
        },
        methods: {
            addColumn: function (row) {
                pageStructureStore.dispatch('addBox', {
                    type: 'column',
                    variable: null, // @T00D00 - determine variable
                    parent: row.pivot.id
                });
            }
        }
    });

    Vue.component('pckg-generic-pageContainer', {
        mixins: [pckgDelimiters, pckgTimeout, pageStructureMixin],
        name: 'pckg-generic-pageContainer',
        template: '#pckg-generic-pageContainer',
        props: {
            action: {
                type: Object
            }
        },
        methods: {
            addRow: function (container) {
                pageStructureStore.dispatch('addBox', {
                    type: 'row',
                    variable: null, // @T00D00 - determine variable
                    parent: container.pivot.id
                });
            }
        }
    });

    Vue.component('pckg-generic-pageWrapper', {
        mixins: [pckgDelimiters, pckgTimeout, pageStructureMixin],
        name: 'pckg-generic-pageWrapper',
        template: '#pckg-generic-pageWrapper',
        props: {
            action: {
                type: Object
            }
        },
        methods: {
            addContainer: function (wrapper) {
                pageStructureStore.dispatch('addBox', {
                    type: 'container',
                    variable: null, // @T00D00 - determine variable
                    parent: wrapper.pivot.id
                });
            }
        }
    });

    Vue.component('pckg-generic-pageVariable', {
        mixins: [pckgDelimiters, pckgTimeout, pageStructureMixin],
        name: 'pckg-generic-pageVariable',
        template: '#pckg-generic-pageVariable',
        props: {
            variable: {
                type: Object
            },
            action: {
                type: Object
            }
        },
        data: function () {
            return {};
        },
        methods: {
            addWrapper: function (variable) {
                pageStructureStore.dispatch('addBox', {
                    type: 'wrapper',
                    variable: variable.id,
                    parent: null
                });
            }
        }
    });

    Vue.component('pckg-generic-page-structure', {
        mixins: [pckgDelimiters, pckgTimeout, pageStructureMixin],
        template: '#pckg-generic-page-structure',
        data: function () {
            return {
                selectedRoute: null,
                layout: {},
                layoutActions: [],
                variable: {},
                action: {},
                actionsMorph: {},
                form: {
                    action_id: null,
                    content_id: null,
                    template: null
                }
            };
        },
        methods: {
            fetchRoute: function () {
                http.getJSON(utils.url('{{ url('pckg.generic.pageStructure.getRoute') }}', {route: this.selectedRoute}), function (data) {
                    pageStructureStore.dispatch('setRoute', data.route);
                    this.fetchActionsMorphs();
                }.bind(this));
            },
            fetchActionsMorphs: function () {
                $.each(this.variables, function (i, variable) {
                    variable.actions = [];
                });

                http.getJSON(utils.url('{{ url('pckg.generic.pageStructure.getActionsMorphs') }}', {route: this.route.id}), function (data) {
                    this.mergeActionsMorphs(data.actionsMorphs);
                }.bind(this));
            },
            mergeActionsMorphs: function (actions) {
                /**
                 * Make tree structure.
                 */
                var treeActions = [];
                $.each(actions, function (i, action) {
                    action.actions = [];
                    $.each(actions, function (j, action2) {
                        if (action2.pivot.parent_id == action.pivot.id) {
                            action.actions.push(action2);
                        }
                    });
                    treeActions.push(action);
                });

                /**
                 * Push to variables.
                 */
                $.each(treeActions, function (i, action) {
                    $.each(this.variables, function (j, variable) {
                        if (variable.id != action.pivot.variable_id || action.pivot.parent_id > 0) {
                            return;
                        }

                        variable.actions.push(action);
                    });
                }.bind(this));
            },
            openDeleteActionModal: function (action) {
                this.action = action;

                $('#deleteActionModal').modal('show');
            },
            openChangeActionModal: function (action) {
                this.action = action;
                this.actionsMorph = action.pivot;

                $('#changeContentModal').modal('show');
            },
            openSetPermissionsModal: function (action) {
                this.action = action;

                Vue.nextTick(function () {
                    $('#setPermissionsModal').modal('show');
                });
            },
            savePermissions: function (actionsMorph) {
                http.post(utils.url('{{ url('pckg.generic.pageStructure.setActionsMorphPermissions') }}',
                    {actionsMorph: actionsMorph.id}),
                    {
                        read: actionsMorph.permissions
                    },
                    function (data) {
                        if (data.success) {
                            $dispatcher.$emit('notification:success', 'Permissions set');
                        } else {
                            $dispatcher.$emit('notification:error', 'Permissions not set');
                        }
                    }.bind(this));
            },
            deleteActionsMorph: function () {
                var action = this.action;
                http.deleteJSON(utils.url('{{ url('pckg.generic.pageStructure.actionsMorph') }}', {actionsMorph: action.pivot.id}), function (data) {
                    if (data.success) {
                        $('#deleteActionModal').modal('hide');
                        $dispatcher.$emit('record:actionsMorph:remove:action', action);
                    }
                });
            },
            getQueryVariable: function (variable) {
                var query = window.location.search.substring(1);
                var vars = query.split('&');
                for (var i = 0; i < vars.length; i++) {
                    var pair = vars[i].split('=');
                    if (decodeURIComponent(pair[0]) == variable) {
                        return decodeURIComponent(pair[1]);
                    }
                }
            }
        },
        created: function () {
            this.$store.registerModule('pageStructure', pageStructureStore);
            pageStructureStore.dispatch('fetchAll');

            $dispatcher.$on('record:actionsMorph:remove:action', function (action) {
                //    this.routeActions.splice(action, 1);
            }.bind(this));

            $dispatcher.$on('record:actionsMorph:add:action', function (action) {
                $.each(this.variables, function (i, variable) {
                    if (variable.id != action.pivot.variable_id) {
                        return;
                    }

                    if (!variable.actions) {
                        variable.actions = [];
                    }
                    variable.actions.push(action);
                });
                // this.routeActions.push(action);
            }.bind(this));

            var search = window.location.search;
            if (search.length > 0) {
                this.selectedRoute = this.getQueryVariable('route');
                var action = this.getQueryVariable('action');
                setTimeout(function () {
                    $('html, body').animate({scrollTop: $('#home' + action).offset().top - 40}, 200);
                }, 1000);
            }
        },
        watch: {
            selectedRoute: function () {
                this.fetchRoute();
            }
        }
    });
</script>