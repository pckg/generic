<script type="text/x-template" id="pckg-generic-page-structure">
    <div class="pageStructure">
        <div class="form-group">
            <label class="col-md-3">Route</label>
            <div class="col-md-9">
                <select class="form-control" v-model="selectedRoute">
                    <option v-for="route in routes" :value="route.id">${ route.route } - ${ route.title } - ${
                        route.slug }
                    </option>
                </select>
            </div>
        </div>

        {% embed 'Pckg/Generic/View/modal.twig' with {'close': true, 'id': 'pageStructureModal', 'class': 'modal-lg'} %}
            {% block header %}
                Add action
            {% endblock %}
            {% block body %}
                <div class="page-structure-actions">
                    <div class="item" v-for="a in actions">
                        <a href="#" @click.prevent="pushAction(a)">
                            <span class="title">${ a.title ? a.title : a.slug }</span>
                            <span class="description">${ a.description }</span>
                        </a>
                    </div>
                </div>
            {% endblock %}
        {% endembed %}

        {% embed 'Pckg/Generic/View/modal.twig' with {'close': true, 'id': 'deleteActionModal'} %}
            {% block header %}
                Delete action
            {% endblock %}
            {% block body %}
                Do you really want to remove action?
            {% endblock %}
            {% block footer %}
                <button class="btn btn-danger" @click="deleteActionsMorph">Yes, delete it</button>
            {% endblock %}
        {% endembed %}

        <div v-for="variable in variables" v-if="route.id" class="variable">
            <h3>${ variable.slug }</h3>

            <div v-for="act in getActionsForVariable(variable)" class="action">
                <ul class="nav nav-tabs" role="tablist">
                    <li role="presentation" class="active">
                        <a :href="'#home' + act.pivot.id" aria-controls="home" role="tab" data-toggle="tab">
                            <i v-if="act.pivot.morph_id == 'Pckg\\Generic\\Entity\\Layout'" class="fa fa-lock"></i>
                            ${ act.title && act.title.length > 0 ? act.title : act.slug }
                        </a>
                    </li>
                    <li role="presentation">
                        <a :href="'#settings' + act.pivot.id" aria-controls="settings" role="tab" data-toggle="tab"><i
                                    class="fa fa-th"></i></a>
                    </li>
                    <li role="presentation">
                        <a :href="'#layout' + act.pivot.id" aria-controls="layout" role="tab" data-toggle="tab"><i
                                    class="fa fa-cogs"></i></a>
                    </li>
                    <li role="presentation">
                        <a :href="'#permissions' + act.pivot.id" aria-controls="permissions" role="tab"
                           data-toggle="tab"><i
                                    class="fa fa-users"></i></a>
                    </li>
                    <li role="presentation">
                        <a :href="'#advanced' + act.pivot.id" aria-controls="advanced" role="tab" data-toggle="tab"><i
                                    class="fa fa-wrench"></i></a>
                    </li>
                </ul>

                <div class="tab-content">
                    <div role="tabpanel" class="tab-pane active" :id="'home' + act.pivot.id">
                        <div class="form-horizontal">
                            <div class="form-group">
                                <label class="col-md-3">Content</label>
                                <div class="col-md-9">
                                    <select class="form-control" v-model="act.pivot.content_id">
                                        <option v-for="content in contents"
                                                :value="content.id">#${ content.id } - ${ content.title }
                                        </option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div role="tabpanel" class="tab-pane" :id="'settings' + act.pivot.id">
                        <div class="form-horizontal" v-if="act">
                            <div class="form-group">
                                <label class="col-md-3">Position</label>
                                <div class="col-md-9">
                                    <input type="number" class="form-control narrow" v-model="act.pivot.order"
                                           @change="timeoutUpdateActionOrder(act)"/>
                                </div>
                            </div>
                            <div class="form-group" v-if="getActionTemplates(actionsMorph.action_id).length > 0">
                                <label class="col-md-3">Template</label>
                                <div class="col-md-9">
                                    <select class="form-control" v-model="actionsMorph.template">
                                        <option v-for="template in getActionTemplates(actionsMorph.action_id)"
                                                :value="template">${ template }
                                        </option>
                                    </select>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="col-md-3">Background</label>
                                <div class="col-md-9">
                                    <select class="form-control" v-model="actionsMorph.background">
                                        <option v-for="background in backgrounds" :value="background.slug">${
                                            background.slug
                                            }
                                        </option>
                                    </select>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="col-md-3">Width</label>
                                <div class="col-md-9">
                                    <select class="form-control" v-model="actionsMorph.width">
                                        <option v-for="width in widths" :value="width.slug">${ width.slug }</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <button class="btn btn-success" @click="saveActionsMorph">Save layout</button>
                    </div>
                    <div role="tabpanel" class="tab-pane" :id="'layout' + act.pivot.id">
                        {# this depends on selected action #}
                        {{ simpleContentForm | raw }}

                        <button class="btn btn-success" @click="saveActionsMorph">Save settings</button>
                    </div>
                    <div role="tabpanel" class="tab-pane" :id="'permissions' + act.pivot.id">
                        <table class="table table-condensed table-hover">
                            <thead>
                            <tr>
                                <th>User group</th>
                                <th>Read</th>
                            </tr>
                            </thead>
                            <tbody>
                            <tr v-for="userGroup in userGroups">
                                <td>${ userGroup.title }</td>
                                <td><input type="checkbox" :value="userGroup.id" v-model="act.pivot.permissions"/>
                                </td>
                            </tr>
                            </tbody>
                        </table>
                        <button class="btn btn-success" @click="savePermissions">Save permissions</button>
                    </div>
                    <div role="tabpanel" class="tab-pane" :id="'advanced' + act.pivot.id">
                        <a href="#" @click.prevent="openDeleteActionModal(act)" class="btn btn-danger">Delete
                            action</a>
                    </div>
                </div>
            </div>

            <a href="#" class="btn btn-info btn-primary" @click.prevent="addAction(variable)">
                <i class="fa fa-plus"></i>
            </a>
        </div>
    </div>
</script>

<script>
    Vue.component('pckg-generic-page-structure', {
        mixins: [pckgDelimiters, pckgTimeout],
        template: '#pckg-generic-page-structure',
        data: function () {
            return {
                contents: [],
                actions: [],
                routes: [],
                selectedRoute: null,
                route: {},
                routeActions: [],
                layout: {},
                layoutActions: [],
                variables: [],
                variable: {},
                userGroups: [
                    {
                        id: 1,
                        title: 'Superadmin'
                    },
                    {
                        id: 2,
                        title: 'User'
                    },
                    {
                        id: 3,
                        title: 'Admin'
                    },
                    {
                        id: null,
                        title: 'Guest'
                    }
                ],
                action: {},
                actionsMorph: {},
                backgrounds: {{ backgrounds.toJSON() | raw }},
                widths: {{ widths.toJSON() | raw }},
                templates: {{ config('pckg.generic.templates') | json_encode | raw }},
                form: {
                    action_id: null,
                    content_id: null,
                    template: null
                }
            };
        },
        methods: {
            fetchRoutes: function () {
                http.getJSON('{{ url('pckg.generic.pageStructure.getRoutes') }}', function (data) {
                    this.routes = data.routes;
                }.bind(this));
            },
            fetchVariables: function () {
                http.getJSON('{{ url('pckg.generic.pageStructure.getVariables') }}', function (data) {
                    this.variables = data.variables;
                }.bind(this));
            },
            fetchActions: function () {
                http.getJSON('{{ url('pckg.generic.pageStructure.getActions') }}', function (data) {
                    this.actions = data.actions;
                }.bind(this));
            },
            fetchContents: function () {
                http.getJSON('{{ url('pckg.generic.pageStructure.getContents') }}', function (data) {
                    this.contents = data.contents;
                }.bind(this));
            },
            fetchRoute: function () {
                http.getJSON(utils.url('{{ url('pckg.generic.pageStructure.getRoute') }}', {route: this.selectedRoute}), function (data) {
                    this.route = data.route;
                    this.fetchRouteActions();
                    this.fetchLayoutActions();
                }.bind(this));
            },
            fetchRouteActions: function () {
                http.getJSON(utils.url('{{ url('pckg.generic.pageStructure.getRouteActions') }}', {route: this.route.id}), function (data) {
                    this.routeActions = data.routeActions;
                }.bind(this));
            },
            fetchLayoutActions: function () {
                http.getJSON(utils.url('{{ url('pckg.generic.pageStructure.getLayoutActions') }}', {layout: this.route.layout_id}), function (data) {
                    this.layoutActions = data.layoutActions;
                }.bind(this));
            },
            getActionsForVariable: function (variable) {
                var actions = [];

                $.each(this.routeActions.filter(function (item) {
                    return variable.id == item.pivot.variable_id;
                }), function (i, action) {
                    actions.push(action);
                });

                $.each(this.layoutActions.filter(function (item) {
                    return variable.id == item.pivot.variable_id;
                }), function (i, action) {
                    actions.push(action);
                });

                return actions.sort(function (a, b) {
                    return utils.sortInt(a.pivot.order, b.pivot.order);
                });
            },

            addAction: function (variable) {
                this.variable = variable;
                $('#pageStructureModal').modal('show');
            },
            openDeleteActionModal: function (action) {
                this.action = action;

                $('#deleteActionModal').modal('show');
            },
            openChangeActionModal: function (action) {
                this.action = action;
                this.actionsMorph = action.pivot;

                $('#changeContentModal').modal('show');
            },
            openSetPermissionsModal: function (action) {
                this.action = action;

                Vue.nextTick(function () {
                    $('#setPermissionsModal').modal('show');
                });
            },
            pushAction: function (action) {
                var postData = {
                    route_id: this.route.id,
                    variable_id: this.variable.id,
                    action_id: action.id
                };

                http.post('{{ url('pckg.generic.pageStructure.addActionsMorph') }}', postData, function (data) {
                    $dispatcher.$emit('notification:success', 'Action successfully added');
                    $('#pageStructureModal').modal('hide');
                    $dispatcher.$emit('record:actionsMorph:add:action', data.action);

                    this.openChangeActionModal(data.action);
                }.bind(this));
            },
            savePermissions: function () {
                http.post(utils.url('{{ url('pckg.generic.pageStructure.setActionsMorphPermissions') }}',
                    {actionsMorph: this.action.pivot.id}),
                    {
                        read: this.action.pivot.permissions
                    },
                    function (data) {
                        if (data.success) {
                            $('#setPermissionsModal').modal('hide');
                        }
                    }.bind(this));
            },
            deleteActionsMorph: function () {
                var action = this.action;
                http.deleteJSON(utils.url('{{ url('pckg.generic.pageStructure.actionsMorph') }}', {actionsMorph: action.pivot.id}), function (data) {
                    if (data.success) {
                        $('#deleteActionModal').modal('hide');
                        $dispatcher.$emit('record:actionsMorph:remove:action', action);
                    }
                });
            },
            saveActionsMorph: function () {
                http.post(
                    utils.url('{{ url('pckg.generic.pageStructure.actionsMorph') }}', {actionsMorph: this.action.pivot.id}),
                    {
                        action_id: this.actionsMorph.action_id,
                        template: this.actionsMorph.template,
                        width: this.actionsMorph.width,
                        background: this.actionsMorph.background,
                    },
                    function (data) {
                        if (data.success) {
                            $('#changeContentModal').modal('hide');
                        }
                    });
            },
            updateActionOrder: function (action) {
                http.post(
                    utils.url('{{ url('pckg.generic.pageStructure.actionsMorph') }}', {actionsMorph: action.pivot.id}),
                    {
                        order: action.pivot.order
                    });
            },
            timeoutUpdateActionOrder: function (action) {
                this.timeout('updateActionOrder' + action.pivot.id, function () {
                    this.updateActionOrder(action);
                }.bind(this), 333);
            },
            getActionTemplates: function (actionId) {
                var action = null;

                $.each(this.actions, function (i, act) {
                    if (act.id == actionId) {
                        action = act;
                        return false;
                    }
                });

                if (!action) {
                    return [];
                }

                if (!this.templates[action.class] || !this.templates[action.class][action.method]) {
                    return [];
                }

                return this.templates[action.class][action.method];
            }
        },
        created: function () {
            this.fetchRoutes();
            this.fetchActions();
            this.fetchVariables();
            this.fetchContents();

            $dispatcher.$on('record:actionsMorph:remove:action', function (action) {
                this.routeActions.splice(action, 1);
            }.bind(this));

            $dispatcher.$on('record:actionsMorph:add:action', function (action) {
                this.routeActions.push(action);
            }.bind(this));
        },
        watch: {
            selectedRoute: function () {
                this.fetchRoute();
            }
        }
    });
</script>