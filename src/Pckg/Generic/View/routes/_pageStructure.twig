<script type="text/x-template" id="pckg-generic-page-structure">
    <div class="pageStructure">
        <div class="form-group">
            <label class="col-md-3">Route</label>
            <div class="col-md-9">
                <select class="form-control" v-model="selectedRoute">
                    <option v-for="route in routes" :value="route.id">${ route.route } - ${ route.title } - ${
                        route.slug }
                    </option>
                </select>
            </div>
        </div>

        {% embed 'Pckg/Generic/View/modal.twig' with {'close': true, 'id': 'pageStructureModal', 'class': 'modal-lg'} %}
            {% block header %}
                Add action
            {% endblock %}
            {% block body %}
                <div class="page-structure-actions">
                    <div class="item" v-for="a in actions">
                        <a href="#" @click.prevent="pushAction(a)">
                            <span class="title">${ a.title ? a.title : a.slug }</span>
                            <span class="description">${ a.description }</span>
                        </a>
                    </div>
                </div>
            {% endblock %}
        {% endembed %}

        {% embed 'Pckg/Generic/View/modal.twig' with {'close': true, 'id': 'deleteActionModal'} %}
            {% block header %}
                Delete action
            {% endblock %}
            {% block body %}
                Do you really want to remove action?
            {% endblock %}
            {% block footer %}
                <button class="btn btn-danger" @click="deleteActionsMorph">Yes, delete it</button>
            {% endblock %}
        {% endembed %}

        <div v-for="variable in variables" v-if="route.id" class="variable">
            <h3>${ variable.slug }</h3>

            <draggable v-model="variable.actions" :options="{handle:'.move-handle'}" @end="onEnd($event, variable)">
                <div v-for="act in variable.actions" class="action">
                    <ul class="nav nav-tabs" role="tablist">
                        <li role="presentation">
                            <a href="#" class="move-handle" @click.prevent>
                                <i class="fa fa-arrows"></i>
                            </a>
                        </li>
                        <li role="presentation" class="active">
                            <a :href="'#home' + act.pivot.id" aria-controls="home" role="tab" data-toggle="tab">
                                <i v-if="act.pivot.morph_id == 'Pckg\\Generic\\Entity\\Layout'" class="fa fa-lock"></i>
                                ${ act.title && act.title.length > 0 ? act.title : act.slug }
                            </a>
                        </li>
                        <li role="presentation">
                            <a :href="'#settings' + act.pivot.id" aria-controls="settings" role="tab" data-toggle="tab"><i
                                        class="fa fa-th"></i></a>
                        </li>
                        <li role="presentation">
                            <a :href="'#layout' + act.pivot.id" aria-controls="layout" role="tab" data-toggle="tab"><i
                                        class="fa fa-cogs"></i></a>
                        </li>
                        <li role="presentation">
                            <a :href="'#permissions' + act.pivot.id" aria-controls="permissions" role="tab"
                               data-toggle="tab"><i
                                        class="fa fa-users"></i></a>
                        </li>
                        <li role="presentation">
                            <a :href="'#advanced' + act.pivot.id" aria-controls="advanced" role="tab" data-toggle="tab"><i
                                        class="fa fa-wrench"></i></a>
                        </li>
                    </ul>

                    <div class="tab-content">
                        <div role="tabpanel" class="tab-pane active" :id="'home' + act.pivot.id">
                            <div class="form-horizontal">
                                <div class="form-group">
                                    <label class="col-md-3">Content</label>
                                    <div class="col-md-9">
                                        <select class="form-control" v-model="act.pivot.content_id"
                                                @change="saveActionsMorph(act.pivot)">
                                            <option v-for="content in contents"
                                                    :value="content.id">#${ content.id } - ${ content.title }
                                            </option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                            <button v-if="act.pivot.content_id" @click="openEditContentPopup(act.pivot.content_id)" class="btn btn-primary">Edit content</button>
                        </div>
                        <div role="tabpanel" class="tab-pane" :id="'settings' + act.pivot.id">
                            <div class="form-horizontal" v-if="act">
                                <div class="form-group">
                                    <label class="col-md-3">Container</label>
                                    <div class="col-md-9">
                                        <select class="form-control" v-model="act.pivot.container"
                                                @change="saveActionsMorph(act.pivot)">
                                            <option>fluid</option>
                                            <option>wrapped</option>
                                            <option>keep</option>
                                            <option>none</option>
                                        </select>
                                        <ul>
                                            <li><b>fluid:</b> open new fluid container around plugin, close old one</li>
                                            <li><b>wrapped:</b> start new wrapped container around plugin, close old one
                                            </li>
                                            <li><b>keep:</b> keep old container opened</li>
                                            <li><b>none:</b> close container if existent</li>
                                        </ul>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="col-md-3">Width</label>
                                    <div class="col-md-9">
                                        <select class="form-control" v-model="act.pivot.width"
                                                @change="saveActionsMorph(act.pivot)">
                                            <option v-for="width in widths" :value="width.slug">${ width.slug }</option>
                                        </select>
                                        <p>Select width of plugin inside of container.</p>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label class="col-md-3">Background</label>
                                    <div class="col-md-9">
                                        <select class="form-control" v-model="act.pivot.background"
                                                @change="saveActionsMorph(act.pivot)">
                                            <option v-for="background in backgrounds" :value="background.slug"
                                                    :html="background.slug"></option>
                                        </select>
                                        <p>Select background class for container.</p>
                                    </div>
                                </div>
                                <div class="form-group" v-if="getActionTemplates(act.id).length > 0">
                                    <label class="col-md-3">Template</label>
                                    <div class="col-md-9">
                                        <select class="form-control" v-model="act.pivot.template"
                                                @change="saveActionsMorph(act.pivot)">
                                            <option v-for="template in getActionTemplates(actionsMorph.action_id)"
                                                    :value="template" :html="template"></option>
                                        </select>
                                        <p>Select presentation template for plugin.</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div role="tabpanel" class="tab-pane" :id="'layout' + act.pivot.id">
                            {# this depends on selected action #}
                            {{ simpleContentForm | raw }}

                            <button class="btn btn-success" @click="saveActionsMorph">Save settings</button>
                        </div>
                        <div role="tabpanel" class="tab-pane" :id="'permissions' + act.pivot.id">
                            <table class="table table-condensed table-hover">
                                <thead>
                                <tr>
                                    <th>User group</th>
                                    <th>Read</th>
                                </tr>
                                </thead>
                                <tbody>
                                <tr v-for="userGroup in userGroups">
                                    <td>${ userGroup.title }</td>
                                    <td><input type="checkbox" :value="userGroup.id" v-model="act.pivot.permissions"/>
                                    </td>
                                </tr>
                                </tbody>
                            </table>
                            <button class="btn btn-success" @click="savePermissions(act.pivot)">Save permissions</button>
                        </div>
                        <div role="tabpanel" class="tab-pane" :id="'advanced' + act.pivot.id">
                            <a href="#" @click.prevent="openDeleteActionModal(act)" class="btn btn-danger">Delete
                                action</a>
                        </div>
                    </div>
                </div>
            </draggable>

            <a href="#" class="btn btn-info btn-block btn-primary" @click.prevent="addAction(variable)">
                <i class="fa fa-plus"></i>
            </a>
        </div>
    </div>
</script>

<script>
    Vue.component('pckg-generic-page-structure', {
        mixins: [pckgDelimiters, pckgTimeout],
        template: '#pckg-generic-page-structure',
        data: function () {
            return {
                contents: [],
                actions: [],
                routes: [],
                selectedRoute: null,
                route: {},
                layout: {},
                layoutActions: [],
                variables: [],
                variable: {},
                userGroups: [
                    {
                        id: 1,
                        title: 'Superadmin'
                    },
                    {
                        id: 2,
                        title: 'User'
                    },
                    {
                        id: 3,
                        title: 'Admin'
                    },
                    {
                        id: null,
                        title: 'Guest'
                    }
                ],
                action: {},
                actionsMorph: {},
                backgrounds: {{ backgrounds.toJSON() | raw }},
                widths: {{ widths.toJSON() | raw }},
                templates: {{ config('pckg.generic.templates') | json_encode | raw }},
                form: {
                    action_id: null,
                    content_id: null,
                    template: null
                }
            };
        },
        methods: {
            fetchRoutes: function () {
                http.getJSON('{{ url('pckg.generic.pageStructure.getRoutes') }}', function (data) {
                    this.routes = data.routes;
                }.bind(this));
            },
            fetchVariables: function () {
                http.getJSON('{{ url('pckg.generic.pageStructure.getVariables') }}', function (data) {
                    this.variables = this.prepareVariables(data.variables);
                }.bind(this));
            },
            prepareVariables: function (variables) {
                $.each(variables, function (i, variable) {
                    variable.actions = [];
                    variables[i] = variable;
                });

                return variables;
            },
            fetchActions: function () {
                http.getJSON('{{ url('pckg.generic.pageStructure.getActions') }}', function (data) {
                    this.actions = data.actions;
                }.bind(this));
            },
            fetchContents: function () {
                http.getJSON('{{ url('pckg.generic.pageStructure.getContents') }}', function (data) {
                    this.contents = data.contents;
                }.bind(this));
            },
            fetchRoute: function () {
                http.getJSON(utils.url('{{ url('pckg.generic.pageStructure.getRoute') }}', {route: this.selectedRoute}), function (data) {
                    this.route = data.route;
                    this.fetchActionsMorphs();
                }.bind(this));
            },
            fetchActionsMorphs: function () {
                $.each(this.variables, function (i, variable) {
                    variable.actions = [];
                });

                http.getJSON(utils.url('{{ url('pckg.generic.pageStructure.getActionsMorphs') }}', {route: this.route.id}), function (data) {
                    this.mergeActionsMorphs(data.actionsMorphs);
                }.bind(this));
            },
            mergeActionsMorphs: function (actionsMorphs) {
                $.each(actionsMorphs, function (i, actionsMorph) {
                    $.each(this.variables, function (j, variable) {
                        if (variable.id != actionsMorph.pivot.variable_id) {
                            return;
                        }

                        variable.actions.push(actionsMorph);
                    });
                }.bind(this));
            },
            openEditContentPopup: function (contentId) {
                $.magnificPopup.open({
                    items: {
                        src: '/dynamic/records/edit/73/' + contentId
                    },
                    type: 'iframe'
                });
            },
            onEnd: function (event, variable) {
                var orders = {};
                $.each(variable.actions, function (i, action) {
                    if (i <= event.newIndex || i <= event.oldIndex) {
                        orders[action.pivot.id] = i;
                    }
                });
                http.post(utils.url('{{ url('pckg.generic.pageStructure.postActionsMorphsOrders') }}'), {orders: orders}, function (data) {

                });
            },
            addAction: function (variable) {
                this.variable = variable;
                $('#pageStructureModal').modal('show');
            },
            openDeleteActionModal: function (action) {
                this.action = action;

                $('#deleteActionModal').modal('show');
            },
            openChangeActionModal: function (action) {
                this.action = action;
                this.actionsMorph = action.pivot;

                $('#changeContentModal').modal('show');
            },
            openSetPermissionsModal: function (action) {
                this.action = action;

                Vue.nextTick(function () {
                    $('#setPermissionsModal').modal('show');
                });
            },
            pushAction: function (action) {
                var postData = {
                    route_id: this.route.id,
                    variable_id: this.variable.id,
                    action_id: action.id
                };

                http.post('{{ url('pckg.generic.pageStructure.addActionsMorph') }}', postData, function (data) {
                    $dispatcher.$emit('notification:success', 'Action successfully added');
                    $('#pageStructureModal').modal('hide');
                    $dispatcher.$emit('record:actionsMorph:add:action', data.action);

                    this.openChangeActionModal(data.action);
                }.bind(this));
            },
            savePermissions: function (actionsMorph) {
                http.post(utils.url('{{ url('pckg.generic.pageStructure.setActionsMorphPermissions') }}',
                    {actionsMorph: actionsMorph.id}),
                    {
                        read: actionsMorph.permissions
                    },
                    function (data) {
                        if (data.success) {
                            $dispatcher.$emit('notification:success', 'Permissions set');
                        } else {
                            $dispatcher.$emit('notification:error', 'Permissions not set');
                        }
                    }.bind(this));
            },
            deleteActionsMorph: function () {
                var action = this.action;
                http.deleteJSON(utils.url('{{ url('pckg.generic.pageStructure.actionsMorph') }}', {actionsMorph: action.pivot.id}), function (data) {
                    if (data.success) {
                        $('#deleteActionModal').modal('hide');
                        $dispatcher.$emit('record:actionsMorph:remove:action', action);
                    }
                });
            },
            saveActionsMorph: function (actionsMorph) {
                http.post(
                    utils.url('{{ url('pckg.generic.pageStructure.actionsMorph') }}', {actionsMorph: actionsMorph.id}),
                    {
                        template: actionsMorph.template,
                        width: actionsMorph.width,
                        background: actionsMorph.background,
                        container: actionsMorph.container,
                        content_id: actionsMorph.content_id
                    },
                    function (data) {
                        if (data.success) {
                            $dispatcher.$emit('notification:success', 'Action saved');
                        } else {
                            $dispatcher.$emit('notification:error', 'Error saving action');
                        }
                    });
            },
            getActionTemplates: function (actionId) {
                var action = null;

                $.each(this.actions, function (i, act) {
                    if (act.id == actionId) {
                        action = act;
                        return false;
                    }
                });

                if (!action) {
                    return [];
                }

                if (!this.templates[action.class] || !this.templates[action.class][action.method]) {
                    return [];
                }

                return this.templates[action.class][action.method];
            }
        },
        created: function () {
            this.fetchRoutes();
            this.fetchActions();
            this.fetchVariables();
            this.fetchContents();

            $dispatcher.$on('record:actionsMorph:remove:action', function (action) {
                //    this.routeActions.splice(action, 1);
            }.bind(this));

            $dispatcher.$on('record:actionsMorph:add:action', function (action) {
                $.each(this.variables, function(i, variable){
                    if (variable.id != action.pivot.variable_id) {
                        return;
                    }

                    variable.actions.push(action);
                });
                this.routeActions.push(action);
            }.bind(this));
        },
        watch: {
            selectedRoute: function () {
                this.fetchRoute();
            }
        }
    });
</script>