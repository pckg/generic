{% do _metaManager.addViewport() %}
{% do _metaManager.addContentType() %}

{{ _gtmManager | raw }}

{{ _metaManager.getMeta('header.first') | raw }}

{{ _seoManager | raw }}

{{ _metaManager.getMeta('header') | raw }}

<!-- libraries css, less and js -->
{{ _assetManager.getMeta(['css', 'less', 'js'], ['libraries']) | raw }}

<script>
    props.locale = '{{ _localeManager.getCurrent() }}';
</script>

<!-- main css, less and js -->
{{ _assetManager.getMeta(['css', 'less', 'js'], ['main']) | raw }}

<!-- external assets-->
{{ _assetManager.getExternals() | raw }}

<!-- vue components -->
{{ _vueManager.getComponents() | raw }}

<script type="text/x-template" id="vue-pckg-select">
    <div class="pckg-select">
        <select v-if="multiple" class="form-control" multiple v-model="selectedMultiple"
                data-live-search="true">
            <option v-for="(option, key) in finalOptions" :value="key" v-html="option"></option>
            <optgroup v-for="(optgroup, label) in finalOptionGroups" :label="label">
                <option v-for="(option, key) in optgroup" :value="key" v-html="option"></option>
            </optgroup>
        </select>
        <select v-else class="form-control" v-model="selectedSingle"
                data-live-search="true">
            <option v-for="(option, key) in finalOptions" :value="key" v-html="option"></option>
            <optgroup v-for="(optgroup, label) in finalOptionGroups" :label="label">
                <option v-for="(option, key) in optgroup" :value="key" v-html="option"></option>
            </optgroup>
        </select>
    </div>
</script>

<script>

    Vue.component('pckg-select', {
        mixins: [pckgDelimiters, pckgTimeout],
        name: 'pckg-select',
        template: '#vue-pckg-select',
        model: {
            prop: 'selected',
            event: 'input'
        },
        data: function () {
            return {
                options: this.initialOptions,
                selectedMultiple: Array.isArray(this.selected) ? this.selected : [this.selected],
                selectedSingle: this.selected,
            };
        },
        props: {
            withEmpty: {
                default: true
            },
            initialOptions: {
                default: function () {
                    return [];
                }
            },
            selected: {
                default: function () {
                    return [];
                }
            },
            initialMultiple: {
                default: true,
                type: Boolean
            },
            refreshUrl: {
                type: String,
                default: ''
            }
        },
        computed: {
            finalOptions: function () {
                var options = {'': ' -- select value -- '};

                $.each(this.options, function (key, item) {
                    if (typeof item != 'string') {
                        return;
                    }

                    options[key] = item;
                });

                return options;
            },
            finalOptionGroups: function () {
                var options = {};
                $.each(this.options, function (key, item) {
                    if (typeof item == 'string') {
                        return;
                    }

                    options[key] = item;
                });

                return options;
            },
            multiple: function () {
                return this.initialMultiple;
            }
        },
        watch: {
            selected: function (newVal) {
                this.$emit('input', newVal);
            },
            selectedMultiple: function (newVal) {
                this.$emit('input', newVal);
            },
            selectedSingle: function (newVal) {
                this.$emit('input', newVal);
            },
            options: function (newVal) {
                console.log('options watcher: options changed');
                Vue.nextTick(function () {
                    console.log('refreshing selectpicker');
                    $(this.$el).find('select').selectpicker('refresh');
                }.bind(this));
            }
        },
        methods: {
            refreshList: function () {
                this.timeout('refreshList', function () {
                    if (this.refreshUrl.length == 0) {
                        console.log("no refresh url");
                        return;
                    }

                    http.getJSON(this.refreshUrl + '?search=' + $(this.$el).find('.bs-searchbox input').val(), function (data) {
                        this.options = data.records;
                    }.bind(this));
                }.bind(this), 333);
            }
        },
        mounted: function () {
            this.$nextTick(function () {
                $(this.$el).find('select').selectpicker({
                    liveSearch: true
                });

                $(this.$el).find('select').selectpicker('refresh');

                /*$(this.$el).find('select').on('change', function () {
                 console.log('changing', $(this.$el).find('select').val());
                 this.$emit('input', $(this.$el).find('select').val());
                 }.bind(this));*/

                $(this.$el).find('.bs-searchbox input').on('keyup', function () {
                    this.refreshList();
                }.bind(this));
            });

            /**
             * Initial fetch.
             */
            if (this.options.length == 0 && this.refreshUrl.length > 0) {
                this.refreshList();
            }
        }
    });
</script>

<!-- vue filters -->
{{ _vueManager.getFilters() | raw }}

<!-- google fonts -->
{{ _assetManager.getGoogleFonts() | raw }}

<!--  vue css, less and js -->
{{ _assetManager.getMeta(['css', 'less', 'js'], ['vue']) | raw }}

<!-- vue live components -->
{{ _vueManager.getViews() | raw }}

<script>
    var Pckg = Pckg || {};
    Pckg.config = {};
    Pckg.config.locale = {
        format: {
            dateMoment: 'LL',
            timeMoment: 'LT'
        },
        currency: '{{ config('pckg.payment.currency') }}',
        currencySign: '{{ config('pckg.payment.currencySign') }}'
    };

    {% if _env.isDev() %}
    Vue.config.debug = true;
    Vue.config.silent = false;
    Vue.config.devtools = true;
    {% endif %}

    Vue.filter('price', function (price, decimals) {
        return locale.price(price, decimals);
    });

    Vue.filter('roundPrice', function (price, decimals) {
        return locale.roundPrice(price, decimals);
    });

    Vue.filter('date', function (date, format) {
        return locale.date(date, format);
    });

    Vue.filter('datetime', function (date, format) {
        return locale.datetime(date, format);
    });

    Vue.filter('ucfirst', function (string) {
        if (!string) {
            return '';
        }

        return string.charAt(0).toUpperCase() + string.slice(1);
    });
</script>

{{ _metaManager.getMeta('headerLast') | raw }}

<script type="text/x-template" id="pckg-dispatcher-notifications-template">
    <div class="pckg-dispatcher-notifications-wrapper">
        <div class="alert alert-dismissible alert-fixed" role="alert"
             :class="'alert-' + notification.type"
             v-for="notification in notifications">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span
                        aria-hidden="true" @click="removeNotification(notification)">&times;</span></button>
            <div v-html="notification.content"></div>
        </div>
    </div>
</script>

<script type="text/x-template" id="pckg-editor">
    <div class="pckg-editor" :class="'pckg-editor-type-' + type">
        <a href="#"
           class="btn btn-xs" @click.prevent="openEditModal">${ type }</a>
        {% embed 'Pckg/Generic/View/modal.twig' with {'close': true} %}
            {% block header %}
                Edit block
            {% endblock %}
            {% block body %}
                <h4>Box</h4>
                <label>Padding</label>
                <input class="form-control" v-model="settings.padding"/>

                <label>Margin</label>
                <input class="form-control" v-model="settings.margin"/>

                <label>Class</label>
                <input class="form-control" v-model="settings.class"/>

                <h4>Background</h4>
                <label>Color</label>
                <input class="form-control" v-model="settings.bgColor"/>

                <label>Image</label>
                <input class="form-control" v-model="settings.bgImage"/>

                <label>Attachment</label>
                <input class="form-control" v-model="settings.bgAttachment"/>

                <label>Position</label>
                <input class="form-control" v-model="settings.bgPosition"/>

                <label>Repeat</label>
                <input class="form-control" v-model="settings.bgRepeat"/>

                <label>Size</label>
                <input class="form-control" v-model="settings.bgSize"/>

                <h4>Generic content</h4>

                <label>No padding</label>
                <input class="form-control" v-model="settings.noPadding"/>

                <label>Picture position</label>
                <input class="form-control" v-model="settings.picturePosition"/>

                <label>Picture width</label>
                <input class="form-control" v-model="settings.pictureWidth"/>

                <label>Picture offset</label>
                <input class="form-control" v-model="settings.pictureOffset"/>

                <label>Content width</label>
                <input class="form-control" v-model="settings.contentWidth"/>

                <label>Content offset</label>
                <input class="form-control" v-model="settings.contentOffset"/>

                <label>Heading</label>
                <input class="form-control" v-model="settings.heading"/>

                <div v-if="type == 'wrapper'">
                </div>
                <div v-else-if="type == 'container'">
                    <label>Container</label>
                    <input class="form-control" v-model="settings.container"/>
                </div>
                <div v-else-if="type == 'row'">

                </div>
                <div v-else-if="type == 'column'">

                </div>
                <div v-else-if="type == 'action'">

                </div>
                <a :href="'/dev.php/tools/page-structure?route=' + routeId + '&action=' + actionsMorphId">Edit in
                    /maestro page structure</a>
            {% endblock %}
        {% endembed %}
    </div>
</script>
<script>
    Vue.component('pckg-dispatcher-notifications', {
        name: 'pckg-dispatcher-notifications',
        template: '#pckg-dispatcher-notifications-template',
        mixins: [pckgTimeout, pckgDelimiters],
        data: function () {
            return {
                notifications: []
            };
        },
        methods: {
            removeNotification: function (notification) {
                this.notifications.splice(this.notifications.indexOf(notification), 1);
            }
        },
        created: function () {
            $dispatcher.$on('notification:success', function (msg) {
                var notification = {
                    content: msg,
                    type: 'success'
                };
                this.notifications.push(notification);
                this.timeout('autoclose', function () {
                    this.removeNotification(notification);
                }.bind(this), 3000, notification);
            }.bind(this));
            $dispatcher.$on('notification:error', function (msg) {
                var notification = {
                    content: msg,
                    type: 'danger'
                };
                this.notifications.push(notification);
                this.timeout('autoclose', function () {
                    this.removeNotification(notification);
                }.bind(this), 5000, notification);
            }.bind(this));
        }
    });

    Vue.component('pckg-editor', {
        props: {
            routeId: {
                type: Number
            },
            actionsMorphId: {
                type: Number
            },
            type: {
                type: String
            }
        },
        name: 'pckg-editor',
        template: '#pckg-editor',
        mixins: [pckgDelimiters],
        data: function () {
            return {
                settings: {
                    padding: '',
                    margin: '',
                    'class': '',
                    bgColor: '',
                    bgImage: '',
                    bgAttachment: '',
                    bgPosition: '',
                    bgRepeat: '',
                    bgSize: '',
                },
            };
        },
        methods: {
            openEditModal: function () {
                $(this.$el).find('.modal').modal('show');
                /*http.get('', function (data) {

                });*/
            }
        }
    });
</script>