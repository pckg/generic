<script type="text/javascript">
    Vue.component('pckg-editor', {
        data: function () {
            return {
                form: {
                    settings: {
                        padding: '',
                        margin: '',
                        'class': '',
                        width: [],
                        offset: [],
                        scopes: [],
                        bgColor: '',
                        bgImage: '',
                        bgAttachment: '',
                        bgPosition: '',
                        bgRepeat: '',
                        bgSize: '',
                        bgVideoSource: '',
                        bgVideo: '',
                        bgVideoDisplay: '',
                        bgVideoAutoplay: '',
                        bgVideoLoop: '',
                        bgVideoControls: '',
                        bgVideoMute: '',
                        viewStyle: '',
                        sourceOffers: [],
                        sourceGalleries: [],
                        sourcePackets: [],
                        wrapperLockHide: [],
                        wrapperLockShow: [],
                        wrapperLockSystem: [],
                        container: '',
                        animation: {
                            event: null, // entrance, exit
                            effect: null, // one of effects
                            delay: null, // 0, 2s, ...
                            infinite: false, //
                            threshold: 80
                        }
                    }
                },
                availableScopes: {},
                availableContainers: {},
                availableHeadings: {'h1': 'H1', 'h2': 'H2', 'h3': 'H3', 'h4': 'H4', 'h5': 'H5'},
                content: {
                    content: '',
                    contents: []
                },
                partials: {},
                structures: {},
                pages: {},
                templates: {},
                footers: {},
                padding: {
                    top: 'no',
                    bottom: 'no',
                    left: 'no',
                    right: 'no'
                },
                margin: {
                    top: 'no',
                    bottom: 'no',
                    left: 'no',
                    right: 'no'
                },
                routes: [],
                systemRoutes: [
                    {
                        slug: 'derive.payment.startPartial',
                        title: 'Start payment',
                    }
                ],
                tempSubcontents: {},
                myMode: this.mode,
                contentModal: false,
                actionBuilderTreeDefaults: [
                    {
                        title: 'Action',
                        component: 'pagebuilder-actionbuilder-template',
                    },
                    {
                        title: 'Display',
                        component: 'pagebuilder-actionbuilder-structure',
                    },
                    {
                        title: 'Box',
                        component: 'pagebuilder-actionbuilder-box',
                    },
                    {
                        title: 'Typography',
                        component: 'pagebuilder-actionbuilder-scopes',
                    },
                    {
                        title: 'Background',
                        component: 'pagebuilder-actionbuilder-background'
                    },
                    {
                        title: 'Effects',
                        component: 'pagebuilder-actionbuilder-animation'
                    },
                    {
                        title: 'Custom',
                        component: 'pagebuilder-actionbuilder-custom'
                    },
                    {
                        title: 'Permissions',
                        component: 'pagebuilder-actionbuilder-permissions'
                    }
                ],
            };
        },
        created: function () {
            $dispatcher.$on('pckg-editor:actionChanged', this.setAction);
            $dispatcher.$on('pckg-editor:addChild', this.addChild);
            $dispatcher.$on('pckg-editor:addRootChild', this.addRootChild);
            this.initialFetch();

            if (this.rootElements.length == 0) {
                this.addRootChild();
            }
        },
        watch: {
            mode: function (newVal) {
                this.myMode = newVal;
            },
            padding: {
                handler: function (newVal, oldVal) {
                    var classes = this.getNormalizedClasses(newVal, 'padding');
                    this.normalizeClasses(classes, 'padding');
                },
                deep: true
            },
            margin: {
                handler: function (newVal, oldVal) {
                    var classes = this.getNormalizedClasses(newVal, 'margin');
                    this.normalizeClasses(classes, 'margin');
                },
                deep: true
            },
            action: function () {
                this.refreshSettings();
            },
            'action.template.template': function (newVal) {
                if (!this.action) {
                    return;
                }
                $dispatcher.$emit('pckg-action:' + this.action.id + ':template-changed', newVal);
            },
            'action.template.list': function (newVal) {
                if (!this.action) {
                    return;
                }
                $dispatcher.$emit('pckg-action:' + this.action.id + ':listTemplate-changed', newVal);
            },
            'action.template.item': function (newVal) {
                if (!this.action) {
                    return;
                }
                $dispatcher.$emit('pckg-action:' + this.action.id + ':itemTemplate-changed', newVal);
            },
            'form.settings.perRow': {
                deep: true,
                handler: function (newVal) {
                    if (!this.action) {
                        return;
                    }
                    $dispatcher.$emit('pckg-action:' + this.action.id + ':perRow-changed', newVal);
                }
            }
        },
        methods: {
            hash: function (value) {
                var hash = 0, i, chr;
                if (value.length === 0) return hash;
                for (i = 0; i < value.length; i++) {
                    chr = value.charCodeAt(i);
                    hash = ((hash << 5) - hash) + chr;
                    hash |= 0; // Convert to 32bit integer
                }
                return hash;
            },
            initialFetch: function () {
                if (this.footers.length > 0) {
                    return;
                }
                http.getJSON(utils.url('@pckg.generic.pageStructure.initialFetch'), function (data) {
                    this.availableScopes = data.availableScopes;
                    this.availableContainers = data.availableContainers;
                    this.availableBackgroundSizes = data.availableBackgroundSizes;
                    this.availableBackgroundRepeats = data.availableBackgroundRepeats;
                    this.availableBackgroundAttachments = data.availableBackgroundAttachments;
                    this.availableBackgroundPositions = data.availableBackgroundPositions;

                    this.partials = data.partials;
                    this.structures = data.structures;
                    this.pages = data.pages;
                    this.templates = data.templates;
                    this.footers = data.footers;

                    this.routes = data.routes;
                }.bind(this));
            },
            scopeSelected: function (scope) {
                return this.form.settings.scopes.indexOf(scope) >= 0;
            },
            toggleScope: function (scope, group) {
                if (this.scopeSelected(scope)) {
                    this.removeFullClass(scope);
                } else {
                    this.addFullClass(scope);
                }
            },
            addFullClass: function (scope) {
                this.form.settings.scopes.push(scope);
            },
            removeFullClass: function (scope) {
                console.log('removeFullClass', scope);
                utils.splice(this.form.settings.scopes, scope);
            },
            openDeleteActionModal: function () {
                $dispatcher.$emit('frontpage-plugin-delete-action:openDeleteActionModal', this.action);
            },
            addChild: function (action) {
                if (action) {
                    $store.commit('setActiveAction', action.id);
                }
                this.$emit('mode', 'add');
            },
            addRootChild: function () {
                $store.commit('setActiveAction', null);
                this.addChild();
            },
            addAction: function (c) {
                var url = this.action
                    ? utils.url('@pckg.generic.pageStructure.actionsMorph.addPartial', {actionsMorph: this.action.id})
                    : utils.url('@pckg.generic.pageStructure.actionsMorph.addRoutePartial', {route: this.route.id});
                $dispatcher.$emit('frontpage-deck:loading:increase');
                http.post(url, {
                    partial: c
                }, function (data) {
                    $dispatcher.$emit('frontpage-deck:loading:decrease');
                    if (data.success) {
                        $dispatcher.$emit('notification:success', 'Action added');
                        if (data.actions) {
                            let action = this.action;
                            $store.commit('addGenericActions', data.actions);
                            if (action) {
                                $store.commit('setActiveAction', action.id);
                            }
                        }
                    } else {
                        $dispatcher.$emit('notification:error', 'Error adding action');
                    }
                }.bind(this), function () {
                    $dispatcher.$emit('frontpage-deck:loading:decrease');
                    $dispatcher.$emit('notification:error', 'Error adding action');
                });
            },
            setAction: function (action) {
                $store.commit('setActiveAction', action ? action.id : null);

                if (!action) {
                    return;
                }

                this.$emit('mode', 'edit');
                $dispatcher.$emit('frontpage-deck:setVisible');
                $('body').addClass('editor-right-opened');

                /**
                 * Set default action template
                 */
                if (this.templates[action.class]
                    && this.templates[action.class][action.method]
                    && !this.templates[action.class][action.method][action.template.template]) {
                    this.action.template.template = Object.keys(this.templates[action.class][action.method])[0];
                    let name = this.templates[action.class][action.method][this.action.template];
                    if (!name) {
                        console.log('template is empty');
                    } else if (typeof name != 'string') {
                        console.log('template is not string');
                        /**
                         * Set default list template
                         */
                        if ((name.item || name.list) && (!action.template.list || action.template.list.length == 0)) {
                            this.action.template.list = Object.keys(name.list)[0];
                        }
                        /**
                         * Set default item template
                         */
                        if (name.item && (!action.template.item || action.template.item.length == 0)) {
                            this.action.template.item = Object.keys(name.item)[0];
                        }
                    } else {
                        console.log('template is string', name);
                    }
                }
                /*
                $dispatcher.$emit('pckg-action:' + this.action.id + ':template-changed', this.action.template);
                $dispatcher.$emit('pckg-action:' + this.action.id + ':listTemplate-changed', this.action.listTemplate);
                $dispatcher.$emit('pckg-action:' + this.action.id + ':itemTemplate-changed', this.action.itemTemplate);
*/
                this.refreshSettings();
            },
            cloneAction: function () {
                $dispatcher.$emit('frontpage-deck:loading:increase');
                http.post(utils.url('@pckg.generic.pageStructure.actionsMorphClone', {actionsMorph: this.action.id}), {}, function (data) {
                    $dispatcher.$emit('frontpage-deck:loading:decrease');
                    if (data.success) {
                        $dispatcher.$emit('notification:success', 'Action cloned');
                        if (data.actions) {
                            $store.commit('addGenericActions', data.actions);
                        }
                    } else {
                        $dispatcher.$emit('notification:success', 'Error cloning action');
                    }
                }, function () {
                    $dispatcher.$emit('frontpage-deck:loading:decrease');
                });
            },
            openEditContentModal: function () {
                $dispatcher.$emit('frontpage-plugin-content:editContent', {
                    action: this.action
                });
            },
            refreshSettings: function () {
                this.form.settings = this.action.settings;
                this.parseSettings();
                /*http.getJSON(utils.url($store.state.router.urls['pckg.generic.pageStructure.actionsMorphSettings'], {actionsMorph: this.action.id}), function (data) {
                    this.form.settings = data.settings;
                    this.parseSettings();
                }.bind(this));*/
            },
            parseSettings: function () {
                /**
                 * Parse paddings and margins.
                 */
                this.parsePadding();
                this.parseMargin();
                //this.parseWrapperSettings();
            },
            parseWrapperSettings: function () {
                this.form.settings.wrapperLockHide = [];
                this.form.settings.wrapperLockShow = [];
                this.form.settings.wrapperLockSystem = [];
            },
            closeSettings: function () {
                $store.commit('setActiveAction', null);
                this.$emit('mode', 'structure');
            },
            lockToRoute: function () {
                this.toggleLock();
            },
            lockToLayout: function () {
                this.toggleLock();
            },
            toggleLock: function () {
                if (!this.action) {
                    return;
                }
                http.post(utils.url('{{ url('pckg.generic.pageStructure.toggleActionsMorphLock') }}', {actionsMorph: this.action.id}), {
                    route: this.route.id
                }, function (data) {
                    this.action.morph = data.actionsMorph.morph_id;
                    $dispatcher.$emit('notification:success', 'Lock moved');
                }.bind(this));
            },
            saveSettings: function () {
                if (!this.action) {
                    return;
                }

                http.post(utils.url('@pckg.generic.pageStructure.actionsMorphSettings', {actionsMorph: this.action.id}), this.getSettingsForSave(), function (data) {
                    if (data.success) {
                        return;
                    }

                    $dispatcher.$emit('notification:error', 'Error saving data');
                }.bind(this));
            },
            getSettingsForSave: function () {
                let data = {
                    settings: this.form.settings,
                    template: this.action.template
                };

                return data;
            },
            pushNormalizedClass: function (classes, val, type, prefix) {
                if (typeof prefix == 'undefined') {
                    prefix = '';
                }
                var lefties = ['no', 'auto'];

                if (lefties.indexOf(val) >= 0) {
                    classes.push(val + '-' + type + prefix);
                } else {
                    classes.push(type + prefix + '-' + val);
                }
            },
            parseMargin: function () {
                this.parse4model('margin');
            },
            parsePadding: function () {
                this.parse4model('padding');
            },
            parse4model: function (type) {
                this[type] = {
                    top: '',
                    bottom: '',
                    left: '',
                    right: ''
                };
                $.each(this.form.settings.scopes, function (i, scope) {
                    var lefty = scope.indexOf('auto-') === 0 || scope.indexOf('no-') === 0;
                    var val = null;
                    var m = '-';
                    // type: padding
                    // direction: vertical
                    // value: no or sm
                    // no-padding-vertical or padding-vertical-sm
                    if (lefty) {
                        val = scope.substring(0, scope.indexOf('-'));
                        m = '';
                    }

                    if (scope.indexOf(type + '-vertical' + m) >= 0) {
                        val = val || scope.substring((type + '-vertical' + m).length);
                        this[type].top = val;
                        this[type].bottom = val;

                    } else if (scope.indexOf(type + '-horizontal' + m) >= 0) {
                        val = val || scope.substring((type + '-horizontal' + m).length);
                        this[type].left = val;
                        this[type].right = val;

                    } else if (scope.indexOf(type + '-top' + m) >= 0) {
                        this[type].top = val || scope.substring((type + '-top' + m).length);

                    } else if (scope.indexOf(type + '-bottom' + m) >= 0) {
                        this[type].bottom = val || scope.substring((type + '-bottom' + m).length);

                    } else if (scope.indexOf(type + '-left' + m) >= 0) {
                        this[type].left = val || scope.substring((type + '-left' + m).length);

                    } else if (scope.indexOf(type + '-right' + m) >= 0) {
                        this[type].right = val || scope.substring((type + '-right' + m).length);

                    } else if (scope.indexOf(type + '-') >= 0 && scope != type + '-0-auto') {
                        val = val || scope.substring((type + '-').length);
                        this[type].top = val;
                        this[type].right = val;
                        this[type].left = val;
                        this[type].bottom = val;

                    }
                }.bind(this));
            },
            getNormalizedClasses: function (newVal, type) {
                /**
                 * Calculate new classes.
                 */
                var classes = [];
                var isVertical = newVal.top == newVal.bottom;
                var isHorizontal = newVal.left == newVal.right;
                var isAll = isVertical && isHorizontal && newVal.top == newVal.left;

                if (isAll) {
                    this.pushNormalizedClass(classes, newVal.top, type);
                } else {
                    if (isVertical) {
                        this.pushNormalizedClass(classes, newVal.top, type, '-vertical');
                    } else {
                        this.pushNormalizedClass(classes, newVal.top, type, '-top');
                        this.pushNormalizedClass(classes, newVal.bottom, type, '-bottom');
                    }

                    if (isHorizontal) {
                        this.pushNormalizedClass(classes, newVal.right, type, '-horizontal');
                    } else {
                        this.pushNormalizedClass(classes, newVal.left, type, '-left');
                        this.pushNormalizedClass(classes, newVal.right, type, '-right');
                    }
                }

                return classes;
            },
            normalizeClasses: function (classes, type) {
                /**
                 * Remove all classes for type from this.form.settings.scopes
                 * Add classes.
                 */
                var toRemove = [];
                $.each(this.form.settings.scopes, function (i, scope) {
                    if (scope.indexOf(type + '-') < 0) {
                        return;
                    }
                    if (scope == type + '-0-auto') {
                        return;
                    }
                    if (scope.indexOf(type) < 0 || classes.indexOf(scope) < 0) {
                        toRemove.push(scope);
                    }
                }.bind(this));

                $.each(toRemove, function (i, c) {
                    this.removeFullClass(c);
                }.bind(this));

                $.each(classes, function (i, c) {
                    if (this.form.settings.scopes.indexOf(c) < 0) {
                        this.addFullClass(c);
                    }
                }.bind(this));
            },
            getResponsiveMapper: function () {
                return {
                    0: '0/12',
                    1: '1/12',
                    2: '2/12',
                    3: '3/12',
                    4: '4/12',
                    5: '5/12',
                    6: '6/12',
                    7: '7/12',
                    8: '8/12',
                    9: '9/12',
                    10: '10/12',
                    11: '11/12',
                    12: '12/12'
                };
            },
            openChild: function (i) {
                this.setAction(this.actionChildren[i]);
                this.scrollToAction();
            },
            openParent: function () {
                this.setAction(this.actionParent);
                this.scrollToAction();
            },
            openPrevious: function () {
                this.setAction(this.previousAction);
                this.scrollToAction();
            },
            openNext: function () {
                this.setAction(this.nextAction);
                this.scrollToAction();
            },
            scrollToAction: function () {
                if (!this.action) {
                    return;
                }

                globalScrollTo($('#' + this.action.type + '-' + this.action.id));
            }
        },
        computed: {
            actionBuilderTree: function () {
                if (!this.action || !this.action.config) {
                    return this.actionBuilderTreeDefaults;
                }

                let tree = [this.action.config];

                $.each(this.actionBuilderTreeDefaults, function (i, item) {
                    tree.push(item);
                });
                return tree;
            },
            rootElements: function () {
                return $store.getters.rootElements;
            },
            action: function () {
                return $store.getters.selectedGenericAction;
            },
            previousAction: function () {
                if (!this.action) {
                    return null;
                }
                return $store.getters.prevAction(this.action.id);
            },
            nextAction: function () {
                if (!this.action) {
                    return null;
                }
                return $store.getters.nextAction(this.action.id);
            },
            cssSizes: function () {
                return ['no', 'auto', 'xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl'];
            },
            actionTemplates: function () {
                if (!this.action) {
                    return {};
                }

                if (!this.templates[this.action.class] || !this.templates[this.action.class][this.action.method]) {
                    return {};
                }

                return this.templates[this.action.class][this.action.method];
            },
            hasMultipleTemplates: function () {
                let templates = this.actionTemplates;
                if (!templates) {
                    return false;
                }

                return Object.keys(templates).length > 1;
            },
            getSlotSelection: function () {
                if (!this.action) {
                    return {};
                }

                let parent = $store.getters.actionParent(this.action.id);
                if (!parent) {
                    return {};
                }

                return parent.slots || {};
            },
            hasTemplateSelection: function () {
                let templates = this.actionTemplates;
                if (!templates) {
                    return false;
                }

                if (Object.keys(templates).length > 1) {
                    return true;
                }
                if (Object.keys(templates).length == 0) {
                    return false; // no templates?
                }

                let template = templates[Object.keys(templates)[0]];

                if (typeof template == 'string') {
                    /**
                     * Single twig template
                     */
                    return false;
                }

                /**
                 * Is not title, so it's object, and it has either list or item templates.
                 */
                if (template.list && Object.keys(template.list).length > 1) {
                    return true;
                }
                if (template.item && Object.keys(template.item).length > 1) {
                    return true;
                }

                return false;
            },
            availableWidths: function () {
                var sizes = {'xs': {}, 'sm': {}, 'md': {}, 'lg': {}, 'xl': {}};
                var mapper = this.getResponsiveMapper();
                var ranges = Array.apply(null, Array(13)).map(function (_, i) {
                    return i;
                });

                $.each(sizes, function (i, size) {
                    $.each(ranges, function (j, range) {
                        sizes[i]['col-' + i + '-' + range] = mapper[j] + ' - ' + Math.round(range / 12 * 100) + '%';
                        /*'col-' + i + '-' + range;*/
                    });
                });

                return sizes;
            },
            availableOffsets: function () {
                var sizes = {'xs': {}, 'sm': {}, 'md': {}, 'lg': {}, 'xl': {}};
                var mapper = this.getResponsiveMapper();
                var ranges = Array.apply(null, Array(13)).map(function (_, i) {
                    return i;
                });

                $.each(sizes, function (i, size) {
                    $.each(ranges, function (j, range) {
                        sizes[i]['col-' + i + '-offset-' + range] = mapper[j] + ' - ' + Math.round(range / 12 * 100) + '%';
                        /*'col-' + i + '-offset-' + range;*/
                    });
                });

                return sizes;
            },
            backgroundImageUploadUrl: function () {
                if (!this.action) {
                    return;
                }
                return utils.url('@pckg.generic.pageStructure.actionsMorphBackgroundImage', {actionsMorph: this.action.id});
            },
            actionParent: function () {
                if (!this.action) {
                    return null;
                }

                return $store.getters.actionParent(this.action.id);
            },
            actionChildren: function () {
                if (!this.action) {
                    return [];
                }

                return $store.getters.actionChildren(this.action.id);
            }
        }
    });
</script>