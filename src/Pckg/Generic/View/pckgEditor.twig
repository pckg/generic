<script type="text/x-template" id="pckg-editor">
    <div class="pckg-editor">

        <div class="pckg-editor-settings" v-if="action.id" :class="visibilityClass">

            <p class="text-center padding-vertical-xs margin-none"><b>${ action.title } #${ action.id }</b></p>

            <div class="clearfix"></div>

            <div class="btn btn-group pull-left">
                <a type="button" href="#" title="Delete element" class="btn btn-danger btn-sm"
                   @click.prevent="openDeleteActionModal">
                    <i aria-hidden="true" class="fa fa-trash-o danger"></i>
                </a>

                <a type="button" href="#" title="Export element" class="btn btn-default btn-sm">
                    <i aria-hidden="true" class="fa fa-download"></i>
                </a>

                <a type="button" href="#" title="Import element" class="btn btn-default btn-sm">
                    <i aria-hidden="true" class="fa fa-upload"></i>
                </a>

                <a type="button" href="#" title="Add child" class="btn btn-default btn-sm" @click.prevent="addChild">
                    <i aria-hidden="true" class="fa fa-plus"></i>
                </a>

                <a type="button" href="#" title="Edit content" class="btn btn-warning btn-sm"
                   @click.prevent="openEditContentModal">
                    <i aria-hidden="true" class="fa fa-pencil"></i>
                </a>

                <a type="button" href="#" title="Save settings" class="btn btn-success btn-sm"
                   @click.prevent="saveSettings">
                    <i aria-hidden="true" class="fa fa-save"></i>
                </a>

                <a type="button" href="#" title="Close settings" class="btn btn-default btn-sm"
                   @click.prevent="closeSettings">
                    <i aria-hidden="true" class="fa fa-close"></i>
                </a>
            </div>

            <div class="clearfix"></div>

            <div class="panel-group" id="accordion" role="tablist" aria-multiselectable="true">

                <div class="panel panel-default">
                    <div class="panel-heading" role="tab" id="headingTwo">
                        <a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordion"
                           href="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                            <i class="fa fa-th-large"></i> Box
                        </a>
                    </div>
                    <div id="collapseTwo" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingTwo">
                        <div class="panel-body">
                            <div v-if="action.type == 'container'">
                                <label>Container</label>
                                <pckg-select v-model="form.settings.container"
                                             :initial-options="availableContainers"></pckg-select>
                            </div>
                            <div v-else-if="action.type == 'column'">
                                <label>Width</label>
                                <pckg-select v-model="form.settings.width"
                                             :initial-options="availableWidths"></pckg-select>

                                <label>Offset</label>
                                <pckg-select v-model="form.settings.offset"
                                             :initial-options="availableOffsets"></pckg-select>
                            </div>

                            <label>Padding</label>
                            <div>
                                <div style="width: 33%; text-align: center; margin: 0 auto; clear: both;">
                                    <select v-model="padding.top">
                                        <option v-for="size in cssSizes" :value="size" v-html="size"></option>
                                    </select>
                                </div>
                                <div style="width: 100%; clear: both;">
                                    <div style="width: 33%; text-align: center; float: left;">
                                        <select v-model="padding.left">
                                            <option v-for="size in cssSizes" :value="size" v-html="size"></option>
                                        </select>
                                    </div>
                                    <div style="width: 33%; text-align: center; float: right;">
                                        <select v-model="padding.right">
                                            <option v-for="size in cssSizes" :value="size" v-html="size"></option>
                                        </select>
                                    </div>
                                </div>
                                <div style="width: 33%; text-align: center; margin: 0 auto; clear: both;">
                                    <select v-model="padding.bottom">
                                        <option v-for="size in cssSizes" :value="size" v-html="size"></option>
                                    </select>
                                </div>
                            </div>

                            <label>Margin</label>
                            <div>
                                <div style="width: 33%; text-align: center; margin: 0 auto; clear: both;">
                                    <select v-model="margin.top">
                                        <option v-for="size in cssSizes" :value="size" v-html="size"></option>
                                    </select>
                                </div>
                                <div style="width: 100%; clear: both;">
                                    <div style="width: 33%; text-align: center; float: left;">
                                        <select v-model="margin.left">
                                            <option v-for="size in cssSizes" :value="size" v-html="size"></option>
                                        </select>
                                    </div>
                                    <div style="width: 33%; text-align: center; float: right;">
                                        <select v-model="margin.right">
                                            <option v-for="size in cssSizes" :value="size" v-html="size"></option>
                                        </select>
                                    </div>
                                </div>
                                <div style="width: 33%; text-align: center; margin: 0 auto; clear: both;">
                                    <select v-model="margin.bottom">
                                        <option v-for="size in cssSizes" :value="size" v-html="size"></option>
                                    </select>
                                </div>
                            </div>

                            <!--<div class="row row-grid">
                                <div class="col-md-12" v-for="(scopes, sectionTitle) in availableScopes"
                                     v-if="['Padding', 'Margin'].indexOf(sectionTitle) !== -1">
                                    <template v-for="(scopes, css) in scopes">
                                        <label v-text="sectionTitle + ' ' + css"></label>
                                        <div class="btn-group btn-group" role="group" aria-label="...">
                                            <a class="btn"
                                               v-for="(title, css) in scopes"
                                               :class="scopeSelected(css) ? 'btn-primary' : 'btn-default'"
                                               @click.prevent="toggleScope(css)">${ title }</a>
                                        </div>
                                    </template>
                                </div>
                            </div>-->
                        </div>
                    </div>
                </div>


                <div class="panel panel-default">
                    <div class="panel-heading" role="tab" id="headingFour">
                        <a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordion"
                           href="#collapseFour" aria-expanded="false" aria-controls="collapseFour">
                            <i class="fa fa-cog"></i> Style
                        </a>
                    </div>
                    <div id="collapseFour" class="panel-collapse collapse" role="tabpanel"
                         aria-labelledby="headingFour">
                        <div class="panel-body">
                            <label>Class</label>
                            <input class="form-control" v-model="form.settings.class"/>

                            <label>Style</label>
                            <input class="form-control" v-model="form.settings.style"/>

                            <div class="row">
                                <template v-for="(scopes, sectionTitle) in availableScopes">
                                    <template v-if="['Padding', 'Margin'].indexOf(sectionTitle) === -1">
                                        <div class="col-md-12">
                                            <label v-text="sectionTitle"></label>
                                            <div class="btn-group btn-group" role="group" aria-label="...">
                                                <a class="btn"
                                                   v-for="(title, css) in scopes"
                                                   :class="scopeSelected(css) ? 'btn-primary' : 'btn-default'"
                                                   @click.prevent="toggleScope(css)">${ title }</a>
                                            </div>
                                        </div>
                                    </template>
                                </template>
                            </div>
                        </div>
                    </div>
                </div>


                <div class="panel panel-default">
                    <div class="panel-heading" role="tab" id="headingOne">
                        <a role="button" data-toggle="collapse" data-parent="#accordion" href="#collapseOne"
                           aria-expanded="true" aria-controls="collapseOne">
                            <i class="fa fa-image"></i> Background
                        </a>
                    </div>
                    <div id="collapseOne" class="panel-collapse collapse" role="tabpanel"
                         aria-labelledby="headingOne">
                        <div class="panel-body">
                            <label>Color</label>
                            <input class="form-control" v-model="form.settings.bgColor"/>

                            <label>Image</label>
                            <pckg-htmlbuilder-dropzone
                                    :current="form.settings.bgImage"
                                    :url="backgroundImageUploadUrl"
                                    id="pckg-editor-dropzone"
                                    v-model="form.settings.bgImage"></pckg-htmlbuilder-dropzone>

                            <template v-if="form.settings.bgImage && form.settings.bgImage.length">
                                <label>Attachment</label>
                                <pckg-select v-model="form.settings.bgAttachment"
                                             :initial-options="availableBackgroundAttachments"
                                             :initial-multiple="false"></pckg-select>

                                <label>Position</label>
                                <pckg-select v-model="form.settings.bgPosition"
                                             :initial-options="availableBackgroundPositions"
                                             :initial-multiple="false"></pckg-select>

                                <label>Repeat</label>
                                <pckg-select v-model="form.settings.bgRepeat"
                                             :initial-options="availableBackgroundRepeats"
                                             :initial-multiple="false"></pckg-select>

                                <label>Size</label>
                                <pckg-select v-model="form.settings.bgSize"
                                             :initial-options="availableBackgroundSizes"
                                             :initial-multiple="false"></pckg-select>
                            </template>

                            <label>Video</label>
                            <div class="row">
                                <div class="col-md-6">
                                    <pckg-select v-model="form.settings.bgVideoSource"
                                                 :initial-options="availableBgVideoSources"
                                                 :initial-multiple="false"></pckg-select>
                                </div>
                                <div class="col-md-6"
                                     v-if="form.settings.bgVideoSource && form.settings.bgVideoSource.length">
                                    <input class="form-control" v-model="form.settings.bgVideo" placeholder="Video ID"/>
                                </div>
                            </div>
                            <template v-if="form.settings.bgVideo && form.settings.bgVideo.length">
                                <label>Display</label>
                                <pckg-select v-model="form.settings.bgVideoDisplay"
                                             :initial-options="availableVideoDisplays"
                                             :initial-multiple="false"></pckg-select>

                                <label>Autoplay</label>
                                <pckg-select v-model="form.settings.bgVideoAutoplay"
                                             :initial-options="availableVideoAutoplays"
                                             :initial-multiple="false"></pckg-select>

                                <label>Loop</label>
                                <pckg-select v-model="form.settings.bgVideoLoop"
                                             :initial-options="availableVideoLoops"
                                             :initial-multiple="false"></pckg-select>

                                <label>Controls</label>
                                <pckg-select v-model="form.settings.bgVideoControls"
                                             :initial-options="availableVideoControls"
                                             :initial-multiple="false"></pckg-select>
                            </template>
                        </div>
                    </div>
                </div>


                <!--<div class="panel panel-default">
                    <div class="panel-heading" role="tab" id="headingThree">
                        <a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordion"
                           href="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                            <i class="fa fa-users"></i> Permissions
                        </a>
                    </div>
                    <div id="collapseThree" class="panel-collapse collapse" role="tabpanel"
                         aria-labelledby="headingThree">
                        <div class="panel-body">
                            <p>... are waiting to be copied from backend</p>
                        </div>
                    </div>
                </div>-->


                <div class="panel panel-default" v-if="actionTemplates.length > 0">
                    <div class="panel-heading" role="tab" id="headingFive">
                        <a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordion"
                           href="#collapseFive" aria-expanded="false" aria-controls="collapseFive">
                            <i class="fa fa-eye"></i> Template
                        </a>
                    </div>
                    <div id="collapseFive" class="panel-collapse collapse" role="tabpanel"
                         aria-labelledby="headingFive">
                        <div class="panel-body">
                            <div>
                                <label>Template</label>
                                <select class="form-control" v-model="action.template">
                                    <option v-for="template in actionTemplates" :value="template">${ template }
                                    </option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>


                {% for slug, form in actionForms %}
                    <div class="panel panel-default" v-if="action.slug == '{{ slug }}'">
                        <div class="panel-heading" role="tab" id="headingForm{{ slug }}">
                            <a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordion"
                               href="#collapseForm{{ slug }}" aria-expanded="false"
                               aria-controls="collapseForm{{ slug }}">
                                <i class="fa fa-cogs"></i> {{ slug }}
                            </a>
                        </div>
                        <div id="collapseForm{{ slug }}" class="panel-collapse collapse" role="tabpanel"
                             aria-labelledby="headingForm{{ slug }}">
                            <div class="panel-body">
                                {{ form | raw }}
                            </div>
                        </div>
                    </div>
                {% endfor %}

                <div class="panel panel-default" v-if="action.type == 'wrapper'">
                    <div class="panel-heading" role="tab" id="headingFormWrapper">
                        <a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordion"
                           href="#collapseFormWrapper" aria-expanded="false"
                           aria-controls="collapseFormWrapper">
                            <i class="fa fa-cogs"></i> Wrapper
                        </a>
                    </div>
                    <div id="collapseFormWrapper" class="panel-collapse collapse" role="tabpanel"
                         aria-labelledby="headingFormWrapper">
                        <div class="panel-body">
                            <template v-if="action.morph == 'Pckg\\Generic\\Entity\\Routes'">
                                <label>Lock to layout
                                    <pckg-tooltip
                                            content="Click this if you want to display module on all pages"></pckg-tooltip>
                                </label>
                                <button type="button" class="btn btn-sm btn-default" @click.prevent="lockToLayout"><i
                                            class="fa-unlock"></i>
                                </button>
                            </template>
                            <template v-else>
                                <label>Lock to route
                                    <pckg-tooltip
                                            content="Click this if you want to display module only on this page"></pckg-tooltip>
                                </label>
                                <button type="button" class="btn btn-sm btn-default" @click.prevent="lockToRoute"><i
                                            class="fa fa-lock"></i>
                                </button>
                                <div>
                                    <label>Hide on pages
                                        <pckg-tooltip
                                                content="Element is by default visible on all pages"></pckg-tooltip>
                                    </label>
                                    <pckg-select :initial-options="routes" :with-empty="false" :initial-multiple="true"
                                                 title="route" id="id" :flat="true"
                                                 v-model="form.settings.wrapperLockHide"></pckg-select>
                                </div>
                                <div>
                                    <label>Show on pages
                                        <pckg-tooltip
                                                content="Element is by default visible on all pages"></pckg-tooltip>
                                    </label>
                                    <pckg-select :initial-options="routes" :with-empty="false" :initial-multiple="true"
                                                 title="route" id="id" :flat="true"
                                                 v-model="form.settings.wrapperLockShow"></pckg-select>
                                </div>
                            </template>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        {# change to <pckg-modal title="Edit block"><slot name="content">...</slot></pckg-modal> #}
        {% embed 'Pckg/Generic/View/modal.twig' with {'close': true, 'class': 'modal-lg', id: 'editBlockModal', vueLoading: '!action.id'} %}
            {% block header %}
                Edit content
            {% endblock %}
            {% block body %}
                <div>
                    <template v-if="content && content.id">
                        <pckg-htmleditor v-model="content.content"></pckg-htmleditor>
                        <br/>

                        <button class="btn btn-warning" @click.prevent="duplicateContent" v-if="content">Copy
                            #${
                            content.id }
                        </button>

                        <a class="btn btn-danger popup-iframe" :href="'/dynamic/records/edit/73/' + content.id"
                           v-if="content">Full
                            edit</a>
                    </template>
                    <button class="btn btn-primary" @click.prevent="createContent">Create empty</button>
                    <button class="btn btn-primary" @click.prevent="switchContent">Switch content</button>
                </div>
            {% endblock %}
            {% block footer %}
                <div role="group" class="btn-group pull-left" style="text-align: right;">
                    <a type="button" href="#" title="Toggle transparency" class="btn btn-default"
                       @click.prevent="toggleTransparency">
                        <i aria-hidden="true" class="fa fa-plus"></i> Toggle transparency
                    </a>
                </div>

                <input type="button" class="btn btn-success" @click.prevent="saveContent" value="Save content"/>
            {% endblock %}
        {% endembed %}
        {% embed 'Pckg/Generic/View/modal.twig' with {'close': true, 'class': 'modal-max', id: 'addNewActionModal'} %}
            {% block header %}
                Add new action
            {% endblock %}
            {% block body %}
                <div class="pckg-icons">
                    <div class="row">
                        <div class="col-md-12">
                            <h2>Elements</h2>

                            <div class="item" v-for="partial in partials">
                                <div class="icon" @click.prevent="addAction(partial.obj)">
                                    <div class="title" v-text="partial.title"></div>
                                    <div v-html="partial.htmlIcon"></div>
                                </div>
                            </div>

                            <h2>Structures</h2>

                            <div class="item" v-for="partial in structures">
                                <div class="icon" @click.prevent="addAction(partial.obj)">
                                    <div class="title" v-text="partial.title"></div>
                                    <div v-html="partial.htmlIcon"></div>
                                </div>
                            </div>

                            <h2>Pages</h2>

                            <div class="item" v-for="partial in pages">
                                <div class="icon" @click.prevent="addAction(partial.obj)">
                                    <div class="title" v-text="partial.title"></div>
                                    <div v-html="partial.htmlIcon"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            {% endblock %}
        {% endembed %}
        {% embed 'Pckg/Generic/View/modal.twig' with {'close': true, id: 'deleteActionModal'} %}
            {% block header %}
                Delete action
            {% endblock %}
            {% block body %}
                Do you really want to delete action #${ action.id }?
                <button class="btn btn-danger" @click.prevent="deleteAction">Yes, delete action</button>
            {% endblock %}
        {% endembed %}
        {% embed 'Pckg/Generic/View/modal.twig' with {'close': true, id: 'switchContentModal', minHeight: '50vh'} %}
            {% block header %}
                Switch content
            {% endblock %}
            {% block body %}
                <pckg-select v-model="changeContentId" :initial-multiple="false"
                             refresh-url="{{ url('pckg.generic.pageStructure.getContents') }}" :flat="true"
                             title="title"></pckg-select>

                <button class="btn btn-success" @click.prevent="saveChangedContent">Change content</button>
            {% endblock %}
        {% endembed %}
    </div>
</script>

<script type="text/javascript">
    Vue.component('pckg-editor', {
        props: {
            routeId: {
                type: Number
            },
            visibilityClass: {
                type: String,
                default: 'hidden'
            }
        },
        name: 'pckg-editor',
        template: '#pckg-editor',
        mixins: [pckgDelimiters],
        data: function () {
            return {
                form: {
                    settings: {
                        padding: '',
                        margin: '',
                        'class': '',
                        width: [],
                        offset: [],
                        scopes: [],
                        bgColor: '',
                        bgImage: '',
                        bgAttachment: '',
                        bgPosition: '',
                        bgRepeat: '',
                        bgSize: '',
                        bgVideoSource: '',
                        bgVideo: '',
                        bgVideoDisplay: '',
                        bgVideoAutoplay: '',
                        bgVideoLoop: '',
                        bgVideoControls: '',
                        viewStyle: '',
                        sourceOffers: [],
                        sourceGalleries: [],
                        sourcePackets: [],
                        wrapperLockHide: [],
                        wrapperLockShow: [],
                    },
                },
                availableScopes: {},
                availableContainers: {},
                availableBackgroundSizes: {},
                availableBackgroundRepeats: {},
                availableBackgroundAttachments: {},
                availableBackgroundPositions: {},
                availableBgVideoSources: {'': 'None', 'vimeo': 'Vimeo', 'youtube': 'Youtube'},
                availableVideoDisplays: {'popup': 'Popup', 'background': 'Background'},
                availableVideoControls: {'yes': 'Yes', 'no': 'No'},
                availableVideoLoops: {'yes': 'Yes', 'no': 'No'},
                availableVideoAutoplays: {'no': 'No', 'yes': 'Yes', 'on-scroll': 'On scroll'},
                availableHeadings: {'h1': 'H1', 'h2': 'H2', 'h3': 'H3', 'h4': 'H4', 'h5': 'H5'},
                action: {},
                content: {
                    content: ''
                },
                changeContentId: '',
                partials: {},
                structures: {},
                pages: {},
                templates: {},
                padding: {
                    top: 'no',
                    bottom: 'no',
                    left: 'no',
                    right: 'no'
                },
                margin: {
                    top: 'no',
                    bottom: 'no',
                    left: 'no',
                    right: 'no'
                },
                routes: []
            };
        },
        created: function () {
            this.initialFetch();
            $dispatcher.$on('pckg-editor:actionChanged', this.setAction);
            $dispatcher.$on('pckg-editor:addChild', this.addChild);
            $dispatcher.$on('pckg-editor:addRootChild', this.addRootChild);
        },
        watch: {
            padding: {
                handler: function (newVal, oldVal) {
                    var classes = this.getNormalizedClasses(newVal, 'padding');
                    this.normalizeClasses(classes, 'padding');
                },
                deep: true
            },
            margin: {
                handler: function (newVal, oldVal) {
                    var classes = this.getNormalizedClasses(newVal, 'margin');
                    this.normalizeClasses(classes, 'margin');
                },
                deep: true
            },
            'form.settings.width': {
                handler: function (newVal, oldVal) {
                    $.each(oldVal, function (i, width) {
                        this.removeActionClass(width);
                    }.bind(this));

                    $.each(newVal, function (i, width) {
                        this.addActionClass(width);
                    }.bind(this));
                },
                deep: true
            },
            'form.settings.offset': {
                handler: function (newVal, oldVal) {
                    $.each(oldVal, function (i, width) {
                        this.removeActionClass(width);
                    }.bind(this));

                    $.each(newVal, function (i, width) {
                        this.addActionClass(width);
                    }.bind(this));
                },
                deep: true
            },
            'content.content': {
                handler: function (newVal, oldVal) {
                    this.changeContent(newVal);
                },
                deep: true
            }
        },
        methods: {
            initialFetch: function () {
                http.getJSON($store.state.router.urls['pckg.generic.pageStructure.initialFetch'], function (data) {
                    this.availableScopes = data.availableScopes;
                    this.availableContainers = data.availableContainers;
                    this.availableBackgroundSizes = data.availableBackgroundSizes;
                    this.availableBackgroundRepeats = data.availableBackgroundRepeats;
                    this.availableBackgroundAttachments = data.availableBackgroundAttachments;
                    this.availableBackgroundPositions = data.availableBackgroundPositions;

                    this.partials = data.partials;
                    this.structures = data.structures;
                    this.pages = data.pages;
                    this.templates = data.templates;

                    this.routes = data.routes;
                }.bind(this));
            },
            saveChangedContent: function () {
                http.post(
                    utils.url('{{ url('pckg.generic.pageStructure.actionsMorph') }}', {actionsMorph: this.action.id}),
                    {
                        content_id: this.changeContentId
                    },
                    function (data) {
                        if (data.success) {
                            $dispatcher.$emit('notification:success', 'Content changed, refreshing');
                            this.refreshWholeContent();
                            $('#switchContentModal').modal('hide');
                        } else {
                            $dispatcher.$emit('notification:error', 'Error changing content');
                        }
                    }.bind(this));
            },
            switchContent: function () {
                $('#switchContentModal').modal('show');
            },
            deleteAction: function () {
                http.deleteJSON(utils.url($store.state.router.urls['pckg.generic.pageStructure.actionsMorph'], {actionsMorph: this.action.id}), function (data) {
                    $('.modal').modal('hide');
                });
            },
            toggleTransparency: function () {
                $(this.$el).find('.modal-dialog').toggleClass('modal-transparent');
            },
            scopeSelected: function (scope) {
                return this.form.settings.scopes.indexOf(scope) >= 0;
            },
            changeContent: function (content) {
                if (this.action.type != 'action') {
                    return;
                }

                var $action = $('#' + this.action.type + '-' + this.action.id);
                var $content = $action.find('.bind-content');

                if ($content.length > 0) {
                    $content.html(content);
                }
            },
            removeActionClass: function (c) {
                var $action = $('#' + this.action.type + '-' + this.action.id);
                $action.removeClass(c);
            },
            addActionClass: function (c) {
                var $action = $('#' + this.action.type + '-' + this.action.id);
                $action.addClass(c);
            },
            toggleScope: function (scope, group) {
                if (this.scopeSelected(scope)) {
                    this.removeFullClass(scope);
                } else {
                    this.addFullClass(scope);
                }
            },
            addFullClass: function (scope) {
                this.form.settings.scopes.push(scope);
                this.addActionClass(scope);
            },
            removeFullClass: function (scope) {
                utils.splice(this.form.settings.scopes, scope);
                this.removeActionClass(scope);
            },
            openDeleteActionModal: function () {
                $('#deleteActionModal').modal('show');
            },
            addChild: function () {
                $('#addNewActionModal').modal('show');
            },
            addRootChild: function () {
                this.action = {};
                this.addChild();
            },
            addAction: function (c) {
                var url = this.action.id
                    ? utils.url($store.state.router.urls['pckg.generic.pageStructure.actionsMorph.addPartial'], {actionsMorph: this.action.id})
                    : utils.url($store.state.router.urls['pckg.generic.pageStructure.actionsMorph.addRoutePartial'], {route: this.routeId});
                http.post(url, {
                    partial: c
                }, function (data) {
                    if (data.success) {
                        $dispatcher.$emit('notification:success', 'Action added');
                        $dispatcher.$emit('pckg-frontpage:fetchTree');
                    }
                });
            },
            setAction: function (action) {
                this.action = action;
                this.refreshSettings();
            },
            openEditContentModal: function () {
                $('#editBlockModal').modal('show');
                this.refreshWholeContent();
            },
            refreshSettings: function () {
                http.getJSON(utils.url($store.state.router.urls['pckg.generic.pageStructure.actionsMorphSettings'], {actionsMorph: this.action.id}), function (data) {
                    this.form.settings = data.settings;
                    this.parseSettings();
                }.bind(this));
            },
            refreshWholeContent: function () {
                http.getJSON(utils.url($store.state.router.urls['pckg.generic.pageStructure.actionsMorphContent'], {actionsMorph: this.action.id}), function (data) {
                    this.content = data.content;
                }.bind(this));
            },
            parseSettings: function () {
                /**
                 * Parse paddings and margins.
                 */
                this.parsePadding();
                this.parseMargin();
                //this.parseWrapperSettings();
            },
            parseWrapperSettings: function () {
                this.form.settings.wrapperLockHide = [];
                this.form.settings.wrapperLockShow = [];
            },
            closeSettings: function () {
                this.action = {};
            },
            lockToRoute: function () {
                this.toggleLock();
            },
            lockToLayout: function () {
                this.toggleLock();
            },
            toggleLock: function () {
                http.post(utils.url('{{ url('pckg.generic.pageStructure.toggleActionsMorphLock') }}', {actionsMorph: this.action.id}), {
                    route: this.routeId
                }, function (data) {
                    this.action.morph = data.actionsMorph.morph_id;
                    $dispatcher.$emit('notification:success', 'Lock moved');
                }.bind(this));
            },
            saveSettings: function () {
                http.post(utils.url($store.state.router.urls['pckg.generic.pageStructure.actionsMorphSettings'], {actionsMorph: this.action.id}), {
                    settings: this.form.settings,
                    template: this.action.template
                }, function (data) {
                    if (data.success) {
                        $('#editBlockModal').modal('hide');
                        return;
                    }

                    $dispatcher.$emit('notification:error', 'Error saving data');
                });
            },
            duplicateContent: function () {
                http.post(utils.url($store.state.router.urls['pckg.generic.pageStructure.duplicateActionsMorphContent'], {actionsMorph: this.action.id}), {}, function (data) {
                    this.content = data.content;
                }.bind(this));
            },
            createContent: function () {
                http.post(utils.url($store.state.router.urls['pckg.generic.pageStructure.createActionsMorphContent'], {actionsMorph: this.action.id}), {}, function (data) {
                    this.content = data.content;
                }.bind(this));
            },
            saveContent: function () {
                http.post(utils.url($store.state.router.urls['pckg.generic.pageStructure.content'], {content: this.content.id}), {content: this.content}, function (data) {
                    this.content = data.content;
                    $('#editBlockModal').modal('hide');
                }.bind(this));
            },
            pushNormalizecClass: function (classes, val, type, prefix) {
                if (typeof prefix == 'undefined') {
                    prefix = '';
                }
                var lefties = ['no', 'auto'];

                if (lefties.indexOf(val) >= 0) {
                    classes.push(val + '-' + type + prefix);
                } else {
                    classes.push(type + prefix + '-' + val);
                }
            },
            parseMargin: function () {
                this.parse4model('margin');
            },
            parsePadding: function () {
                this.parse4model('padding');
            },
            parse4model: function (type) {
                this[type] = {
                    top: '',
                    bottom: '',
                    left: '',
                    right: ''
                };
                $.each(this.form.settings.scopes, function (i, scope) {
                    var val;
                    if (scope.indexOf(type + '-vertical-') === 0) {
                        val = scope.substring((type + '-vertical-').length);
                        this[type].top = val;
                        this[type].bottom = val;

                    } else if (scope.indexOf(type + '-horizontal-') === 0) {
                        val = scope.substring((type + '-horizontal-').length);
                        this[type].left = val;
                        this[type].right = val;

                    } else if (scope.indexOf(type + '-top-') === 0) {
                        this[type].top = scope.substring((type + '-top-').length);

                    } else if (scope.indexOf(type + '-bottom-') === 0) {
                        this[type].bottom = scope.substring((type + '-bottom-').length);

                    } else if (scope.indexOf(type + '-left-') === 0) {
                        this[type].left = scope.substring((type + '-left-').length);

                    } else if (scope.indexOf(type + '-right-') === 0) {
                        this[type].right = scope.substring((type + '-right-').length);

                    } else if (scope.indexOf(type + '-') === 0) {
                        val = scope.substring((type + '-').length);
                        this[type].top = val;
                        this[type].right = val;
                        this[type].left = val;
                        this[type].bottom = val;

                    }
                }.bind(this));
            },
            getNormalizedClasses: function (newVal, type) {
                /**
                 * Calculate new classes.
                 */
                var classes = [];
                var isVertical = newVal.top == newVal.bottom;
                var isHorizontal = newVal.left == newVal.right;
                var isAll = isVertical && isHorizontal && newVal.top == newVal.left;

                if (isAll) {
                    this.pushNormalizecClass(classes, newVal.top, type);
                } else {
                    if (isVertical) {
                        this.pushNormalizecClass(classes, newVal.top, type, '-vertical');
                    } else {
                        this.pushNormalizecClass(classes, newVal.top, type, '-top');
                        this.pushNormalizecClass(classes, newVal.bottom, type, '-bottom');
                    }

                    if (isHorizontal) {
                        this.pushNormalizecClass(classes, newVal.right, type, '-horizontal');
                    } else {
                        this.pushNormalizecClass(classes, newVal.left, type, '-left');
                        this.pushNormalizecClass(classes, newVal.right, type, '-right');
                    }
                }

                return classes;
            },
            normalizeClasses: function (classes, type) {
                /**
                 * Remove all classes for type from this.form.settings.scopes
                 * Add classes.
                 */
                var toRemove = [];
                $.each(this.form.settings.scopes, function (i, scope) {
                    if (scope.indexOf(type + '-') < 0) {
                        return;
                    }
                    if (scope.indexOf(type) < 0 || classes.indexOf(scope) < 0) {
                        toRemove.push(scope);
                    }
                }.bind(this));

                $.each(toRemove, function (i, c) {
                    this.removeFullClass(c);
                }.bind(this));

                $.each(classes, function (i, c) {
                    if (this.form.settings.scopes.indexOf(c) < 0) {
                        this.addFullClass(c);
                    }
                }.bind(this));
            },
            getResponsiveMapper: function () {
                return {
                    0: '0/12',
                    1: '1/12',
                    2: '1/6',
                    3: '1/4',
                    4: '1/3',
                    5: '5/12',
                    6: '1/2',
                    7: '7/12',
                    8: '2/3',
                    9: '3/4',
                    10: '5/6',
                    11: '11/12',
                    12: '12/12'
                };
            }
        },
        computed: {
            cssSizes: function () {
                return ['no', 'auto', 'xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl'];
            },
            actionTemplates: function () {
                if (!this.action) {
                    return [];
                }

                if (!this.templates[this.action.class] || !this.templates[this.action.class][this.action.method]) {
                    return [];
                }

                return this.templates[this.action.class][this.action.method];
            },
            availableWidths: function () {
                var sizes = {'xs': {}, 'sm': {}, 'md': {}, 'lg': {}, 'xl': {}};
                var mapper = this.getResponsiveMapper();
                var ranges = Array.apply(null, Array(13)).map(function (_, i) {
                    return i;
                });

                $.each(sizes, function (i, size) {
                    $.each(ranges, function (j, range) {
                        sizes[i]['col-' + i + '-' + range] = mapper[j] + ' - ' + Math.round(range / 12 * 100) + '%';
                        /*'col-' + i + '-' + range;*/
                    });
                });

                return sizes;
            },
            availableOffsets: function () {
                var sizes = {'xs': {}, 'sm': {}, 'md': {}, 'lg': {}, 'xl': {}};
                var mapper = this.getResponsiveMapper();
                var ranges = Array.apply(null, Array(13)).map(function (_, i) {
                    return i;
                });

                $.each(sizes, function (i, size) {
                    $.each(ranges, function (j, range) {
                        sizes[i]['col-' + i + '-offset-' + range] = mapper[j] + ' - ' + Math.round(range / 12 * 100) + '%';
                        /*'col-' + i + '-offset-' + range;*/
                    });
                });

                return sizes;
            },
            backgroundImageUploadUrl: function () {
                return utils.url($store.state.router.urls['pckg.generic.pageStructure.actionsMorphBackgroundImage'], {actionsMorph: this.action.id});
            }
        }
    });
</script>