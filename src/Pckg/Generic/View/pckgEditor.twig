<script type="text/x-template" id="pckg-editor">
    <div class="pckg-editor">

        <!--<div class="clearfix"></div>

        <div class="btn btn-group pull-right">
            <a type="button" href="#" title="Close tree" class="btn btn-default btn-sm"
               @click.prevent="toggleVisibility">
                <i aria-hidden="true" class="fa fa-times"></i>
            </a>

            <a type="button" href="#" title="Move to other side" class="btn btn-default btn-sm"
               @click.prevent="toggleAlignment">
                <i aria-hidden="true" class="fa fa-arrows"></i>
            </a>
        </div>-->

        <div class="pckg-editor-settings mode-add" v-if="myMode == 'add'">

            <p class="text-center padding-xs margin-none">
                <b>New action</b>
                <a href="#" title="Close modules" class="btn btn-default btn-xs pull-right"
                   @click.prevent="closeSettings">
                    <i aria-hidden="true" class="fa fa-times"></i>
                </a>
            </p>

            <div class="clearfix"></div>

            <div class="panel panel-default" v-for="(subPartials, title) in partials">

                <div class="panel-heading">
                    <i class="fa fa-th-large"></i> ${ title }
                </div>

                <div class="panel-body">

                    <div class="display-block">
                        <button type="button" class="btn btn-default" @click.prevent="addAction(partial.obj)"
                                v-for="(partial, title) in subPartials">
                            ${ partial.title }
                        </button>
                    </div>

                </div>

            </div>


            <div class="panel panel-default">

                <div class="panel-heading">
                    <i class="fa fa-th-large"></i> Structures
                </div>

                <div class="panel-body">

                    <div class="display-block">
                        <button type="button" class="btn btn-default" @click.prevent="addAction(partial.obj)"
                                v-for="(partial, title) in structures">
                            ${ partial.title }
                        </button>
                    </div>

                </div>

            </div>

            <div class="panel panel-default">

                <div class="panel-heading">
                    <i class="fa fa-th-large"></i> Pages
                </div>

                <div class="panel-body">

                    <div class="display-block">
                        <button type="button" class="btn btn-default" @click.prevent="addAction(partial.obj)"
                                v-for="(partial, title) in pages">
                            ${ partial.title }
                        </button>
                    </div>

                </div>

            </div>

            <div class="panel panel-default">

                <div class="panel-heading">
                    <i class="fa fa-th-large"></i> Footers
                </div>

                <div class="panel-body">

                    <div class="display-block">
                        <button type="button" class="btn btn-default" @click.prevent="addAction(partial.obj)"
                                v-for="(partial, title) in footers">
                            ${ partial.title }
                        </button>
                    </div>

                </div>

            </div>

        </div>

        <div class="pckg-editor-settings mode-edit" v-else-if="action">

            <!-- action parent and children navigation -->
            <div class="fixed-to-top">
                <div class="as-table padding-vertical-xxs">
                    <div class="text-left">
                        <table class="navigator">
                            <tr>
                                <td></td>
                                <td>
                                    <button type="button" class="btn btn-default btn-sm" title="Go to previous element"
                                            @click.prevent="openPrevious" :disabled="!previousAction">
                                        <i class="fa fa-chevron-up"></i></button>
                                </td>
                                <td></td>
                            </tr>
                            <tr>
                                <td>
                                    <button type="button" class="btn btn-default btn-sm" title="Go to parent"
                                            :disabled="!actionParent"
                                            @click.prevent="setAction(actionParent)">
                                        <i class="fa fa-chevron-left"></i></button>
                                </td>
                                <td></td>
                                <td>
                                    <button v-if="actionChildren.length <= 1" type="button"
                                            class="btn btn-default btn-sm"
                                            title="Go to child" @click.prevent="setAction(actionChildren[0])"
                                            :disabled="actionChildren.length == 0">
                                        <i class="fa fa-chevron-right"></i></button>

                                    <div class="btn-group btn-group-sm" v-else>
                                        <button class="dropdown-toggle btn btn-default btn-sm"
                                                title="List children" data-toggle="dropdown"
                                                role="button" aria-haspopup="true" aria-expanded="false">
                                            <i class="fa fa-ellipsis-h"></i>
                                        </button>

                                        <ul class="dropdown-menu dropdown-menu-left">
                                            <li v-for="childAction in actionChildren">
                                                <a href="#" @click.prevent="setAction(childAction)">${ childAction.title
                                                    }
                                                    #${
                                                    childAction.id }</a>
                                            </li>
                                        </ul>
                                    </div>
                                </td>
                            </tr>
                            <tr>
                                <td></td>
                                <td>
                                    <button type="button" class="btn btn-default btn-sm" title="Go to next element"
                                            @click.prevent="openNext" :disabled="!nextAction">
                                        <i class="fa fa-chevron-down"></i></button>
                                </td>
                                <td></td>
                            </tr>
                        </table>
                    </div>
                    <div class="text-center"><b>${ action.title } #${ action.id }</b></div>
                    <div class="text-right">

                        <a type="button" href="#" title="Save settings" class="btn btn-default btn-sm"
                           @click.prevent="saveSettings">
                            <i aria-hidden="true" class="fa fa-save"></i>
                        </a>

                        <div class="btn-group text-left">
                            <button class="btn btn-default btn-sm dropdown-toggle" data-toggle="dropdown"
                                    role="button"
                                    aria-haspopup="true"
                                    aria-expanded="false" title="More page options">
                                <i class="fa fa-ellipsis-v"></i>
                            </button>
                            <ul class="dropdown-menu dropdown-menu-right">
                                <li>
                                    <a type="button" href="#" title="Add child" class="btn btn-default btn-sm"
                                       @click.prevent="addChild(action)">
                                        <i aria-hidden="true" class="fa fa-plus"></i> Add element
                                    </a>
                                </li>
                                <li>
                                    <a type="button" href="#" title="Edit content" class="btn btn-default btn-sm"
                                       @click.prevent="openEditContentModal">
                                        <i aria-hidden="true" class="fa fa-edit"></i> Edit content
                                    </a>
                                </li>
                                <li>
                                    <a type="button" href="#" title="Clone element" class="btn btn-default btn-sm"
                                       @click.prevent="cloneAction">
                                        <i aria-hidden="true" class="fa fa-clone"></i> Clone action
                                    </a>
                                </li>
                                <!--<li>
                                    <a type="button" href="#" title="Export element" class="btn btn-default btn-sm">
                                        <i aria-hidden="true" class="fa fa-download"></i> Export element
                                    </a>
                                </li>
                                <li>
                                    <a type="button" href="#" title="Import element" class="btn btn-default btn-sm">
                                        <i aria-hidden="true" class="fa fa-upload"></i> Import element
                                    </a>
                                </li>-->
                                <li>
                                    <a type="button" href="#" title="Delete element" class="btn btn-default btn-sm"
                                       @click.prevent="openDeleteActionModal">
                                        <i aria-hidden="true" class="fa fa-trash danger"></i> Delete
                                    </a>
                                </li>
                            </ul>
                        </div>

                        <a type="button" href="#" title="Close settings" class="btn btn-default btn-sm"
                           @click.prevent="setAction(null)">
                            <i aria-hidden="true" class="fa fa-times"></i>
                        </a>

                    </div>
                </div>
            </div>

            <div class="clearfix"></div>


            <div class="panel panel-default" v-if="hasTemplateSelection || Object.keys(getSlotSelection).length > 0">

                <div class="panel-heading">
                    <i class="fa fa-palette"></i> Template
                </div>

                <div class="panel-body">

                    <div v-if="Object.keys(getSlotSelection).length > 0">
                        <label>Slot</label>
                        <select class="form-control" v-model="action.template.slot">
                            <option v-for="(title, slot) in getSlotSelection" :value="slot">${ title }
                            </option>
                        </select>
                    </div>

                    <template v-if="hasTemplateSelection">
                        <div v-if="hasMultipleTemplates">
                            <label>Template</label>
                            <select class="form-control" v-model="action.template.template">
                                <option v-for="(title,tpl) in actionTemplates" :value="tpl"
                                        v-if="typeof title === 'string'">${ title }
                                </option>

                                <template v-for="(title,tpl) in actionTemplates" v-if="typeof title !== 'string'">
                                    <option :value="tpl">${ tpl }</option>
                                </template>
                            </select>
                        </div>

                        <div v-if="actionTemplates && actionTemplates[action.template.template] && typeof actionTemplates[action.template.template] != 'string' && actionTemplates[action.template.template].item">
                            <label>Item template</label>
                            <select class="form-control" v-model="action.template.item">
                                <option v-for="(title,tpl) in actionTemplates[action.template.template].item"
                                        :value="tpl">${ title }
                                </option>
                            </select>
                        </div>

                        <div v-if="actionTemplates && actionTemplates[action.template.template] && typeof actionTemplates[action.template.template] != 'string' && actionTemplates[action.template.template].list">
                            <label>List template</label>
                            <select class="form-control" v-model="action.template.list">
                                <option v-for="(title,tpl) in actionTemplates[action.template.template].list"
                                        :value="tpl">${ title }
                                </option>
                            </select>
                        </div>
                    </template>

                </div>
            </div>

            {% for slug, form in actionForms %}
                <div class="panel panel-default" v-if="action.slug == '{{ slug }}'">

                    <div class="panel-heading">
                        <i class="fa fa-cogs"></i> Settings <!-- {{ slug }} -->
                    </div>

                    <div class="panel-body">
                        {{ form | raw }}
                    </div>

                </div>
            {% endfor %}

            <div class="panel panel-default" v-if="action.type == 'wrapper'">

                <div class="panel-heading">
                    <i class="fa fa-cogs"></i> Wrapper
                </div>

                <div class="panel-body">
                    <template v-if="action.morph == 'Pckg\\Generic\\Entity\\Routes'">
                        <label>Lock to layout
                            <pckg-tooltip
                                    content="Click this if you want to display module on all pages"
                                    icon="question-circle"></pckg-tooltip>
                        </label>
                        <button type="button" class="btn btn-sm btn-default" @click.prevent="lockToLayout"><i
                                    class="fa-unlock"></i>
                        </button>
                    </template>
                    <template v-else>
                        <label>Lock to route
                            <pckg-tooltip
                                    content="Click this if you want to display module only on this page"
                                    icon="question-circle"></pckg-tooltip>
                        </label>
                        <button type="button" class="btn btn-sm btn-default" @click.prevent="lockToRoute"><i
                                    class="fa fa-lock"></i>
                        </button>
                        <div>
                            <label>Hide on pages
                                <pckg-tooltip
                                        content="Element is by default visible on all pages"
                                        icon="question-circle"></pckg-tooltip>
                            </label>
                            <pckg-select :initial-options="routes" :with-empty="null" :initial-multiple="true"
                                         title="route" id="id" :flat="true"
                                         v-model="form.settings.wrapperLockHide"></pckg-select>
                        </div>
                        <div>
                            <label>Show on pages
                                <pckg-tooltip
                                        content="Element is by default visible on all pages"
                                        icon="question-circle"></pckg-tooltip>
                            </label>
                            <pckg-select :initial-options="routes" :with-empty="null" :initial-multiple="true"
                                         title="route" id="id" :flat="true"
                                         v-model="form.settings.wrapperLockShow"></pckg-select>
                        </div>
                        <div>
                            <label>Show on system pages
                                <pckg-tooltip
                                        content="Show element on system pages"
                                        icon="question-circle"></pckg-tooltip>
                            </label>
                            <pckg-select :initial-options="systemRoutes" :with-empty="null"
                                         :initial-multiple="true"
                                         title="title" id="slug" :flat="true"
                                         v-model="form.settings.wrapperLockSystem"></pckg-select>
                        </div>
                    </template>
                </div>
            </div>

            <div class="panel panel-default">

                <div class="panel-heading">
                    <i class="fal fa-square"></i> Box
                </div>

                <div class="panel-body">
                    <div v-if="action.type == 'container'">
                        <label>Container</label>
                        <pckg-select v-model="form.settings.container"
                                     :initial-options="availableContainers"
                                     :initial-multiple="false"></pckg-select>
                    </div>
                    <div v-else-if="action.type == 'column'">

                        <!--<label>Screen size</label>
                        <div class="btn-group btn-group-justified">
                            <div class="btn-group">
                                <button class="btn btn-default btn-sm">XS</button>
                            </div>
                            <div class="btn-group">
                                <button class="btn btn-default btn-sm">SM</button>
                            </div>
                            <div class="btn-group">
                                <button class="btn btn-default btn-sm">MD</button>
                            </div>
                            <div class="btn-group">
                                <button class="btn btn-default btn-sm">LG</button>
                            </div>
                            <div class="btn-group">
                                <button class="btn btn-default btn-sm">XL</button>
                            </div>
                        </div>-->

                        <label>Width</label>
                        <pckg-select v-model="form.settings.width"
                                     :initial-options="availableWidths"></pckg-select>

                        <label>Offset</label>
                        <pckg-select v-model="form.settings.offset"
                                     :initial-options="availableOffsets"></pckg-select>
                    </div>

                    <label>Padding</label>
                    <div>
                        <div style="width: 33%; text-align: center; margin: 0 auto; clear: both;">
                            <select v-model="padding.top">
                                <option v-for="size in cssSizes" :value="size" v-html="size"></option>
                            </select>
                        </div>
                        <div style="width: 100%; clear: both;">
                            <div style="width: 33%; text-align: center; float: left;">
                                <select v-model="padding.left">
                                    <option v-for="size in cssSizes" :value="size" v-html="size"></option>
                                </select>
                            </div>
                            <div style="width: 33%; text-align: center; float: right;">
                                <select v-model="padding.right">
                                    <option v-for="size in cssSizes" :value="size" v-html="size"></option>
                                </select>
                            </div>
                        </div>
                        <div style="width: 33%; text-align: center; margin: 0 auto; clear: both;">
                            <select v-model="padding.bottom">
                                <option v-for="size in cssSizes" :value="size" v-html="size"></option>
                            </select>
                        </div>
                    </div>

                    <label>Margin</label>
                    <div>
                        <div style="width: 33%; text-align: center; margin: 0 auto; clear: both;">
                            <select v-model="margin.top">
                                <option v-for="size in cssSizes" :value="size" v-html="size"></option>
                            </select>
                        </div>
                        <div style="width: 100%; clear: both;">
                            <div style="width: 33%; text-align: center; float: left;">
                                <select v-model="margin.left">
                                    <option v-for="size in cssSizes" :value="size" v-html="size"></option>
                                </select>
                            </div>
                            <div style="width: 33%; text-align: center; float: right;">
                                <select v-model="margin.right">
                                    <option v-for="size in cssSizes" :value="size" v-html="size"></option>
                                </select>
                            </div>
                        </div>
                        <div style="width: 33%; text-align: center; margin: 0 auto; clear: both;">
                            <select v-model="margin.bottom">
                                <option v-for="size in cssSizes" :value="size" v-html="size"></option>
                            </select>
                        </div>
                    </div>

                    <!--<div class="row row-grid">
                        <div class="col-md-12" v-for="(scopes, sectionTitle) in availableScopes"
                             v-if="['Padding', 'Margin'].indexOf(sectionTitle) !== -1">
                            <template v-for="(scopes, css) in scopes">
                                <label v-text="sectionTitle + ' ' + css"></label>
                                <div class="btn-group btn-group" role="group" aria-label="...">
                                    <a class="btn"
                                       v-for="(title, css) in scopes"
                                       :class="scopeSelected(css) ? 'btn-primary' : 'btn-default'"
                                       @click.prevent="toggleScope(css)">${ title }</a>
                                </div>
                            </template>
                        </div>
                    </div>-->
                </div>
            </div>


            <div class="panel panel-default">

                <div class="panel-heading">
                    <i class="fa fa-magic"></i> Style
                </div>

                <div class="panel-body">

                    <div class="row">
                        <template v-for="(scopes, sectionTitle) in availableScopes">
                            <template v-if="['Padding', 'Margin'].indexOf(sectionTitle) === -1">
                                <div class="col-md-12">
                                    <label v-text="sectionTitle"></label>
                                    <div class="btn-group btn-group" role="group" aria-label="...">
                                        <a class="btn"
                                           v-for="(title, css) in scopes"
                                           :class="scopeSelected(css) ? 'btn-primary' : 'btn-default'"
                                           @click.prevent="toggleScope(css)">${ title }</a>
                                    </div>
                                </div>
                            </template>
                        </template>
                    </div>
                </div>
            </div>


            <div class="panel panel-default">

                <div class="panel-heading">
                    <i class="fa fa-image"></i> Background
                </div>

                <div class="panel-body">
                    <label>Color</label>
                    <input class="form-control" type="text" v-model="form.settings.bgColor"/>

                    <label>Image</label>
                    <pckg-htmlbuilder-dropzone
                            :current="form.settings.bgImage"
                            :url="backgroundImageUploadUrl"
                            id="pckg-editor-dropzone"
                            v-model="form.settings.bgImage"></pckg-htmlbuilder-dropzone>

                    <template v-if="form.settings.bgImage && form.settings.bgImage.length">
                        <label>Attachment</label>
                        <pckg-select v-model="form.settings.bgAttachment"
                                     :initial-options="availableBackgroundAttachments"
                                     :initial-multiple="false"></pckg-select>

                        <label>Position</label>
                        <pckg-select v-model="form.settings.bgPosition"
                                     :initial-options="availableBackgroundPositions"
                                     :initial-multiple="false"></pckg-select>

                        <label>Repeat</label>
                        <pckg-select v-model="form.settings.bgRepeat"
                                     :initial-options="availableBackgroundRepeats"
                                     :initial-multiple="false"></pckg-select>

                        <label>Size</label>
                        <pckg-select v-model="form.settings.bgSize"
                                     :initial-options="availableBackgroundSizes"
                                     :initial-multiple="false"></pckg-select>
                    </template>

                    <label>Video</label>
                    <div class="row">
                        <div class="col-md-6">
                            <pckg-select v-model="form.settings.bgVideoSource"
                                         :initial-options="availableBgVideoSources"
                                         :initial-multiple="false"></pckg-select>
                        </div>
                        <div class="col-md-6"
                             v-if="form.settings.bgVideoSource && form.settings.bgVideoSource.length">
                            <input class="form-control" v-model="form.settings.bgVideo" placeholder="Video ID"/>
                        </div>
                    </div>
                    <template v-if="form.settings.bgVideo && form.settings.bgVideo.length">
                        <label>Display</label>
                        <pckg-select v-model="form.settings.bgVideoDisplay"
                                     :initial-options="availableVideoDisplays"
                                     :initial-multiple="false"></pckg-select>

                        <label>Autoplay</label>
                        <pckg-select v-model="form.settings.bgVideoAutoplay"
                                     :initial-options="availableVideoAutoplays"
                                     :initial-multiple="false"></pckg-select>

                        <label>Loop</label>
                        <pckg-select v-model="form.settings.bgVideoLoop"
                                     :initial-options="availableVideoLoops"
                                     :initial-multiple="false"></pckg-select>

                        <label>Controls</label>
                        <pckg-select v-model="form.settings.bgVideoControls"
                                     :initial-options="availableVideoControls"
                                     :initial-multiple="false"></pckg-select>

                        <label>Mute</label>
                        <input type="checkbox" value="1" v-model="form.settings.bgVideoMute"/>
                    </template>
                </div>
            </div>


            <div class="panel panel-default">
                <div class="panel-heading">
                    <i class="fa fa-cog"></i> Custom
                </div>

                <div class="panel-body">
                    <label>Class</label>
                    <input class="form-control" type="text" v-model="form.settings.class"/>

                    <label>Style</label>
                    <input class="form-control" type="text" v-model="form.settings.style"/>
                </div>
            </div>


            <!--<div class="panel panel-default">
                <div class="panel-heading" role="tab" id="headingThree">
                    <a class="collapsed" role="button" data-toggle="collapse" data-parent="#accordion"
                       href="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                        <i class="fa fa-users"></i> Permissions
                    </a>
                </div>
                <div id="collapseThree" class="panel-collapse collapse" role="tabpanel"
                     aria-labelledby="headingThree">
                    <div class="panel-body">
                        <p>... are waiting to be copied from backend</p>
                    </div>
                </div>
            </div>-->
        </div>

        {% embed 'Pckg/Generic/View/modal.twig' with {'close': true, 'class': 'modal-lg', id: 'editBlockModal', vueLoading: '!action'} %}
            {% block header %}
                Edit content
            {% endblock %}
            {% block body %}
                <div>
                    <template v-if="content && content.id">
                        <h4>
                            <button class="btn btn-warning" @click.prevent="duplicateContent(content)" v-if="content">
                                Copy
                                #${
                                content.id }
                            </button>

                            <a class="btn btn-danger popup-iframe" :href="'/dynamic/records/edit/73/' + content.id"
                               v-if="content">Full
                                edit</a>

                            #${ content.id } - ${ content.title }
                        </h4>

                        <pckg-htmleditor v-model="content.content" :key="content.id"></pckg-htmleditor>
                        <br/>

                        <template v-if="content.contents && content.contents.length > 0">
                            <button @click.prevent="toggleShowSubcontents" class="btn btn-primary">Show / Hide
                                subcontents
                            </button>
                            <br/>
                            <template v-if="showSubcontents">
                                <div v-for="subcontent in content.contents" :key="subcontent.id">
                                    <h5>
                                        <button class="btn btn-warning" @click.prevent="duplicateContent(subcontent)">
                                            Copy
                                            #${
                                            subcontent.id }
                                        </button>

                                        <a class="btn btn-danger popup-iframe"
                                           :href="'/dynamic/records/edit/73/' + subcontent.id">Full
                                            edit</a>

                                        #${ subcontent.id } - ${ subcontent.title }
                                    </h5>

                                    <pckg-htmleditor v-model="subcontent.content"></pckg-htmleditor>
                                </div>
                            </template>
                            <br/>
                        </template>
                    </template>
                    <button class="btn btn-primary" @click.prevent="createContent">Create empty</button>
                    <button class="btn btn-primary" @click.prevent="switchContent">Switch content</button>
                </div>
            {% endblock %}
            {% block footer %}
                <div role="group" class="btn-group pull-left" style="text-align: right;">
                    <a type="button" href="#" title="Toggle transparency" class="btn btn-default"
                       @click.prevent="toggleTransparency">
                        <i aria-hidden="true" class="fa fa-plus"></i> Toggle transparency
                    </a>
                </div>

                <input type="button" class="btn btn-success" @click.prevent="saveContent" value="Save content"/>
            {% endblock %}
        {% endembed %}

        {% embed 'Pckg/Generic/View/modal.twig' with {'close': true, id: 'switchContentModal', minHeight: '50vh'} %}
            {% block header %}
                Switch content
            {% endblock %}
            {% block body %}
                <pckg-select v-model="changeContentId" :initial-multiple="false"
                             refresh-url="{{ url('pckg.generic.pageStructure.getContents') }}" :flat="true"
                             title="title"></pckg-select>

                <button class="btn btn-success" @click.prevent="saveChangedContent">Change content</button>
            {% endblock %}
        {% endembed %}
    </div>
</script>

<script type="text/javascript">
    Vue.component('pckg-editor', {
        props: {
            route: {},
            mode: {
                default: 'edit'
            }
        },
        name: 'pckg-editor',
        template: '#pckg-editor',
        mixins: [pckgDelimiters],
        data: function () {
            return {
                form: {
                    settings: {
                        padding: '',
                        margin: '',
                        'class': '',
                        width: [],
                        offset: [],
                        scopes: [],
                        bgColor: '',
                        bgImage: '',
                        bgAttachment: '',
                        bgPosition: '',
                        bgRepeat: '',
                        bgSize: '',
                        bgVideoSource: '',
                        bgVideo: '',
                        bgVideoDisplay: '',
                        bgVideoAutoplay: '',
                        bgVideoLoop: '',
                        bgVideoControls: '',
                        bgVideoMute: '',
                        viewStyle: '',
                        sourceOffers: [],
                        sourceGalleries: [],
                        sourcePackets: [],
                        wrapperLockHide: [],
                        wrapperLockShow: [],
                        wrapperLockSystem: [],
                        container: ''
                    }
                },
                availableScopes: {},
                availableContainers: {},
                availableBackgroundSizes: {},
                availableBackgroundRepeats: {},
                availableBackgroundAttachments: {},
                availableBackgroundPositions: {},
                availableBgVideoSources: {'': 'None', 'vimeo': 'Vimeo', 'youtube': 'Youtube'},
                availableVideoDisplays: {'popup': 'Popup', 'background': 'Background'},
                availableVideoControls: {'yes': 'Yes', 'no': 'No'},
                availableVideoLoops: {'yes': 'Yes', 'no': 'No'},
                availableVideoAutoplays: {'no': 'No', 'yes': 'Yes', 'on-scroll': 'On scroll'},
                availableHeadings: {'h1': 'H1', 'h2': 'H2', 'h3': 'H3', 'h4': 'H4', 'h5': 'H5'},
                content: {
                    content: '',
                    contents: []
                },
                changeContentId: '',
                partials: {},
                structures: {},
                pages: {},
                templates: {},
                footers: {},
                padding: {
                    top: 'no',
                    bottom: 'no',
                    left: 'no',
                    right: 'no'
                },
                margin: {
                    top: 'no',
                    bottom: 'no',
                    left: 'no',
                    right: 'no'
                },
                routes: [],
                systemRoutes: [
                    {
                        slug: 'derive.payment.startPartial',
                        title: 'Start payment',
                    }
                ],
                showSubcontents: false,
                tempSubcontents: {},
                myMode: this.mode
            };
        },
        created: function () {
            $dispatcher.$on('pckg-editor:actionChanged', this.setAction);
            $dispatcher.$on('pckg-editor:addChild', this.addChild);
            $dispatcher.$on('pckg-editor:addRootChild', this.addRootChild);
            this.initialFetch();

            if (this.rootElements.length == 0) {
                this.addRootChild();
            }
        },
        watch: {
            mode: function (newVal) {
                this.myMode = newVal;
            },
            padding: {
                handler: function (newVal, oldVal) {
                    var classes = this.getNormalizedClasses(newVal, 'padding');
                    this.normalizeClasses(classes, 'padding');
                },
                deep: true
            },
            margin: {
                handler: function (newVal, oldVal) {
                    var classes = this.getNormalizedClasses(newVal, 'margin');
                    this.normalizeClasses(classes, 'margin');
                },
                deep: true
            },
            action: function () {
                this.refreshSettings();
            },
            'action.template.template': function (newVal) {
                if (!this.action) {
                    return;
                }
                $dispatcher.$emit('pckg-action:' + this.action.id + ':template-changed', newVal);
            },
            'action.template.list': function (newVal) {
                if (!this.action) {
                    return;
                }
                $dispatcher.$emit('pckg-action:' + this.action.id + ':listTemplate-changed', newVal);
            },
            'action.template.item': function (newVal) {
                if (!this.action) {
                    return;
                }
                $dispatcher.$emit('pckg-action:' + this.action.id + ':itemTemplate-changed', newVal);
            },
            'form.settings.perRow': {
                deep: true,
                handler: function (newVal) {
                    if (!this.action) {
                        return;
                    }
                    $dispatcher.$emit('pckg-action:' + this.action.id + ':perRow-changed', newVal);
                }
            },
            'content.contents': {
                handler: function (newVal, oldVal) {
                    var temp = this.tempSubcontents;
                    this.tempSubcontents = {};
                    $.each(newVal, function (i, subcontent) {
                        if (typeof temp[i] == undefined) {
                        } else if (subcontent.content != temp[i]) {
                            this.changeContent(subcontent);
                        }
                        this.tempSubcontents[i] = subcontent.content;
                    }.bind(this));
                },
                deep: true
            },
            'content.content': {
                handler: function (newVal, oldVal) {
                    this.changeContent(this.content);
                },
                deep: true
            }
        },
        methods: {
            hash: function (value) {
                var hash = 0, i, chr;
                if (value.length === 0) return hash;
                for (i = 0; i < value.length; i++) {
                    chr = value.charCodeAt(i);
                    hash = ((hash << 5) - hash) + chr;
                    hash |= 0; // Convert to 32bit integer
                }
                return hash;
            },
            toggleShowSubcontents: function () {
                this.showSubcontents = !this.showSubcontents;
            },
            initialFetch: function () {
                if (this.footers.length > 0) {
                    return;
                }
                http.getJSON(utils.url('@pckg.generic.pageStructure.initialFetch'), function (data) {
                    this.availableScopes = data.availableScopes;
                    this.availableContainers = data.availableContainers;
                    this.availableBackgroundSizes = data.availableBackgroundSizes;
                    this.availableBackgroundRepeats = data.availableBackgroundRepeats;
                    this.availableBackgroundAttachments = data.availableBackgroundAttachments;
                    this.availableBackgroundPositions = data.availableBackgroundPositions;

                    this.partials = data.partials;
                    this.structures = data.structures;
                    this.pages = data.pages;
                    this.templates = data.templates;
                    this.footers = data.footers;

                    this.routes = data.routes;
                }.bind(this));
            },
            saveChangedContent: function () {
                if (!this.action) {
                    return;
                }

                http.post(
                    utils.url('{{ url('pckg.generic.pageStructure.actionsMorph') }}', {actionsMorph: this.action.id}),
                    {
                        content_id: this.changeContentId
                    },
                    function (data) {
                        if (data.success) {
                            $dispatcher.$emit('notification:success', 'Content changed, refreshing');
                            this.refreshWholeContent();
                            $('#switchContentModal').modal('hide');
                        } else {
                            $dispatcher.$emit('notification:error', 'Error changing content');
                        }
                    }.bind(this));
            },
            switchContent: function () {
                $('#switchContentModal').modal('show');
            },
            toggleTransparency: function () {
                $(this.$el).find('.modal-dialog').toggleClass('modal-transparent');
            },
            scopeSelected: function (scope) {
                return this.form.settings.scopes.indexOf(scope) >= 0;
            },
            changeContent: function (content) {
                if (!content || !this.action || this.action.type != 'action') {
                    return;
                }

                /*var $action = $('#' + this.action.type + '-' + this.action.id);

                var $content = $action.find('.bind-content-' + content.id);

                if ($content.length > 0) {
                    $content.html(content.content);
                } else {
                    $content = $action.find('.bind-content');

                    if ($content.length > 0) {
                        $content.html(content.content);
                    }
                }*/

                $store.commit('setActionContent', {action: this.action, content: content});
            },
            toggleScope: function (scope, group) {
                if (this.scopeSelected(scope)) {
                    this.removeFullClass(scope);
                } else {
                    this.addFullClass(scope);
                }
            },
            addFullClass: function (scope) {
                this.form.settings.scopes.push(scope);
            },
            removeFullClass: function (scope) {
                console.log('removeFullClass', scope);
                utils.splice(this.form.settings.scopes, scope);
            },
            openDeleteActionModal: function () {
                $dispatcher.$emit('frontpage-plugin-delete-action:openDeleteActionModal', this.action);
            },
            addChild: function (action) {
                if (action) {
                    $store.commit('setActiveAction', action.id);
                }
                this.$emit('mode', 'add');
            },
            addRootChild: function () {
                $store.commit('setActiveAction', null);
                this.addChild();
            },
            addAction: function (c) {
                var url = this.action
                    ? utils.url('@pckg.generic.pageStructure.actionsMorph.addPartial', {actionsMorph: this.action.id})
                    : utils.url('@pckg.generic.pageStructure.actionsMorph.addRoutePartial', {route: this.route.id});
                $dispatcher.$emit('frontpage-deck:loading:increase');
                http.post(url, {
                    partial: c
                }, function (data) {
                    $dispatcher.$emit('frontpage-deck:loading:decrease');
                    if (data.success) {
                        $dispatcher.$emit('notification:success', 'Action added');
                        if (data.actions) {
                            $store.commit('addGenericActions', data.actions);
                        }
                    } else {
                        $dispatcher.$emit('notification:success', 'Error adding action');
                    }
                }, function () {
                    $dispatcher.$emit('frontpage-deck:loading:decrease');
                    $dispatcher.$emit('notification:success', 'Error adding action');
                });
            },
            setAction: function (action) {
                $store.commit('setActiveAction', action ? action.id : null);

                if (!action) {
                    return;
                }

                this.$emit('mode', 'edit');
                $dispatcher.$emit('frontpage-deck:setVisible');
                $('body').addClass('editor-right-opened');

                /**
                 * Set default action template
                 */
                if (this.templates[action.class]
                    && this.templates[action.class][action.method]
                    && !this.templates[action.class][action.method][action.template.template]) {
                    this.action.template.template = Object.keys(this.templates[action.class][action.method])[0];
                    let name = this.templates[action.class][action.method][this.action.template];
                    if (!name) {
                        console.log('template is empty');
                    } else if (typeof name != 'string') {
                        console.log('template is not string');
                        /**
                         * Set default list template
                         */
                        if ((name.item || name.list) && (!action.template.list || action.template.list.length == 0)) {
                            this.action.template.list = Object.keys(name.list)[0];
                        }
                        /**
                         * Set default item template
                         */
                        if (name.item && (!action.template.item || action.template.item.length == 0)) {
                            this.action.template.item = Object.keys(name.item)[0];
                        }
                    } else {
                        console.log('template is string', name);
                    }
                }
                /*
                $dispatcher.$emit('pckg-action:' + this.action.id + ':template-changed', this.action.template);
                $dispatcher.$emit('pckg-action:' + this.action.id + ':listTemplate-changed', this.action.listTemplate);
                $dispatcher.$emit('pckg-action:' + this.action.id + ':itemTemplate-changed', this.action.itemTemplate);
*/
                this.refreshSettings();
            },
            cloneAction: function () {
                $dispatcher.$emit('frontpage-deck:loading:increase');
                http.post(utils.url('@pckg.generic.pageStructure.actionsMorphClone', {actionsMorph: this.action.id}), {}, function (data) {
                    $dispatcher.$emit('frontpage-deck:loading:decrease');
                    if (data.success) {
                        $dispatcher.$emit('notification:success', 'Action cloned');
                        if (data.actions) {
                            $store.commit('addGenericActions', data.actions);
                        }
                    } else {
                        $dispatcher.$emit('notification:success', 'Error cloning action');
                    }
                }, function () {
                    $dispatcher.$emit('frontpage-deck:loading:decrease');
                });
            },
            openEditContentModal: function () {
                $('#editBlockModal').modal('show');
                this.refreshWholeContent();
            },
            refreshSettings: function () {
                this.form.settings = this.action.settings;
                this.parseSettings();
                /*http.getJSON(utils.url($store.state.router.urls['pckg.generic.pageStructure.actionsMorphSettings'], {actionsMorph: this.action.id}), function (data) {
                    this.form.settings = data.settings;
                    this.parseSettings();
                }.bind(this));*/
            },
            refreshWholeContent: function () {
                if (!this.action) {
                    return;
                }
                http.getJSON(utils.url('@pckg.generic.pageStructure.actionsMorphContent', {actionsMorph: this.action.id}), function (data) {
                    this.content = data.content;
                }.bind(this));
            },
            parseSettings: function () {
                /**
                 * Parse paddings and margins.
                 */
                this.parsePadding();
                this.parseMargin();
                //this.parseWrapperSettings();
            },
            parseWrapperSettings: function () {
                this.form.settings.wrapperLockHide = [];
                this.form.settings.wrapperLockShow = [];
                this.form.settings.wrapperLockSystem = [];
            },
            closeSettings: function () {
                $store.commit('setActiveAction', null);
                this.$emit('mode', 'view');
            },
            lockToRoute: function () {
                this.toggleLock();
            },
            lockToLayout: function () {
                this.toggleLock();
            },
            toggleLock: function () {
                if (!this.action) {
                    return;
                }
                http.post(utils.url('{{ url('pckg.generic.pageStructure.toggleActionsMorphLock') }}', {actionsMorph: this.action.id}), {
                    route: this.route.id
                }, function (data) {
                    this.action.morph = data.actionsMorph.morph_id;
                    $dispatcher.$emit('notification:success', 'Lock moved');
                }.bind(this));
            },
            saveSettings: function () {
                if (!this.action) {
                    return;
                }

                http.post(utils.url('@pckg.generic.pageStructure.actionsMorphSettings', {actionsMorph: this.action.id}), {
                    settings: this.form.settings,
                    template: this.action.template
                }, function (data) {
                    if (data.success) {
                        $('#editBlockModal').modal('hide');
                        return;
                    }

                    $dispatcher.$emit('notification:error', 'Error saving data');
                });
            },
            duplicateContent: function (content) {
                if (!this.action) {
                    return;
                }
                http.post(utils.url('@pckg.generic.pageStructure.duplicateActionsMorphContent', {actionsMorph: this.action.id}), {}, function (data) {
                    this.content = data.content;
                }.bind(this));
            },
            createContent: function () {
                if (!this.action) {
                    return;
                }
                http.post(utils.url('@pckg.generic.pageStructure.createActionsMorphContent', {actionsMorph: this.action.id}), {}, function (data) {
                    this.content = data.content;
                }.bind(this));
            },
            saveContent: function () {
                http.post(utils.url('@pckg.generic.pageStructure.content', {content: this.content.id}), {content: this.content}, function (data) {
                    this.content = data.content;
                    $('#editBlockModal').modal('hide');
                }.bind(this));
            },
            pushNormalizedClass: function (classes, val, type, prefix) {
                if (typeof prefix == 'undefined') {
                    prefix = '';
                }
                var lefties = ['no', 'auto'];

                if (lefties.indexOf(val) >= 0) {
                    classes.push(val + '-' + type + prefix);
                } else {
                    classes.push(type + prefix + '-' + val);
                }
            },
            parseMargin: function () {
                this.parse4model('margin');
            },
            parsePadding: function () {
                this.parse4model('padding');
            },
            parse4model: function (type) {
                this[type] = {
                    top: '',
                    bottom: '',
                    left: '',
                    right: ''
                };
                $.each(this.form.settings.scopes, function (i, scope) {
                    var lefty = scope.indexOf('auto-') === 0 || scope.indexOf('no-') === 0;
                    var val = null;
                    var m = '-';
                    // type: padding
                    // direction: vertical
                    // value: no or sm
                    // no-padding-vertical or padding-vertical-sm
                    if (lefty) {
                        val = scope.substring(0, scope.indexOf('-'));
                        m = '';
                    }

                    if (scope.indexOf(type + '-vertical' + m) >= 0) {
                        val = val || scope.substring((type + '-vertical' + m).length);
                        this[type].top = val;
                        this[type].bottom = val;

                    } else if (scope.indexOf(type + '-horizontal' + m) >= 0) {
                        val = val || scope.substring((type + '-horizontal' + m).length);
                        this[type].left = val;
                        this[type].right = val;

                    } else if (scope.indexOf(type + '-top' + m) >= 0) {
                        this[type].top = val || scope.substring((type + '-top' + m).length);

                    } else if (scope.indexOf(type + '-bottom' + m) >= 0) {
                        this[type].bottom = val || scope.substring((type + '-bottom' + m).length);

                    } else if (scope.indexOf(type + '-left' + m) >= 0) {
                        this[type].left = val || scope.substring((type + '-left' + m).length);

                    } else if (scope.indexOf(type + '-right' + m) >= 0) {
                        this[type].right = val || scope.substring((type + '-right' + m).length);

                    } else if (scope.indexOf(type + '-') >= 0 && scope != type + '-0-auto') {
                        val = val || scope.substring((type + '-').length);
                        this[type].top = val;
                        this[type].right = val;
                        this[type].left = val;
                        this[type].bottom = val;

                    }
                }.bind(this));
            },
            getNormalizedClasses: function (newVal, type) {
                /**
                 * Calculate new classes.
                 */
                var classes = [];
                var isVertical = newVal.top == newVal.bottom;
                var isHorizontal = newVal.left == newVal.right;
                var isAll = isVertical && isHorizontal && newVal.top == newVal.left;

                if (isAll) {
                    this.pushNormalizedClass(classes, newVal.top, type);
                } else {
                    if (isVertical) {
                        this.pushNormalizedClass(classes, newVal.top, type, '-vertical');
                    } else {
                        this.pushNormalizedClass(classes, newVal.top, type, '-top');
                        this.pushNormalizedClass(classes, newVal.bottom, type, '-bottom');
                    }

                    if (isHorizontal) {
                        this.pushNormalizedClass(classes, newVal.right, type, '-horizontal');
                    } else {
                        this.pushNormalizedClass(classes, newVal.left, type, '-left');
                        this.pushNormalizedClass(classes, newVal.right, type, '-right');
                    }
                }

                return classes;
            },
            normalizeClasses: function (classes, type) {
                /**
                 * Remove all classes for type from this.form.settings.scopes
                 * Add classes.
                 */
                var toRemove = [];
                $.each(this.form.settings.scopes, function (i, scope) {
                    if (scope.indexOf(type + '-') < 0) {
                        return;
                    }
                    if (scope == type + '-0-auto') {
                        return;
                    }
                    if (scope.indexOf(type) < 0 || classes.indexOf(scope) < 0) {
                        toRemove.push(scope);
                    }
                }.bind(this));

                $.each(toRemove, function (i, c) {
                    this.removeFullClass(c);
                }.bind(this));

                $.each(classes, function (i, c) {
                    if (this.form.settings.scopes.indexOf(c) < 0) {
                        this.addFullClass(c);
                    }
                }.bind(this));
            },
            getResponsiveMapper: function () {
                return {
                    0: '0/12',
                    1: '1/12',
                    2: '2/12',
                    3: '3/12',
                    4: '4/12',
                    5: '5/12',
                    6: '6/12',
                    7: '7/12',
                    8: '8/12',
                    9: '9/12',
                    10: '10/12',
                    11: '11/12',
                    12: '12/12'
                };
            },
            openPrevious: function () {
                this.setAction(this.previousAction);
            },
            openNext: function () {
                this.setAction(this.nextAction);
            },
        },
        computed: {
            rootElements: function () {
                return $store.getters.rootElements;
            },
            action: function () {
                return $store.getters.selectedGenericAction;
            },
            previousAction: function () {
                if (!this.action) {
                    return null;
                }
                return $store.getters.prevAction(this.action.id);
            },
            nextAction: function () {
                if (!this.action) {
                    return null;
                }
                return $store.getters.nextAction(this.action.id);
            },
            cssSizes: function () {
                return ['no', 'auto', 'xxs', 'xs', 'sm', 'md', 'lg', 'xl', 'xxl'];
            },
            actionTemplates: function () {
                if (!this.action) {
                    return {};
                }

                if (!this.templates[this.action.class] || !this.templates[this.action.class][this.action.method]) {
                    return {};
                }

                return this.templates[this.action.class][this.action.method];
            },
            hasMultipleTemplates: function () {
                let templates = this.actionTemplates;
                if (!templates) {
                    return false;
                }

                return Object.keys(templates).length > 1;
            },
            getSlotSelection: function () {
                if (!this.action) {
                    return {};
                }

                let parent = $store.getters.actionParent(this.action.id);
                if (!parent) {
                    return {};
                }

                return parent.slots || {};
            },
            hasTemplateSelection: function () {
                let templates = this.actionTemplates;
                if (!templates) {
                    return false;
                }

                if (Object.keys(templates).length > 1) {
                    return true;
                }
                if (Object.keys(templates).length == 0) {
                    return false; // no templates?
                }

                let template = templates[Object.keys(templates)[0]];

                if (typeof template == 'string') {
                    /**
                     * Single twig template
                     */
                    return false;
                }

                /**
                 * Is not title, so it's object, and it has either list or item templates.
                 */
                return (template.list && Object.keys(template.list).length > 1)
                    || (template.item && Object.keys(template.item) > 1);
            },
            availableWidths: function () {
                var sizes = {'xs': {}, 'sm': {}, 'md': {}, 'lg': {}, 'xl': {}};
                var mapper = this.getResponsiveMapper();
                var ranges = Array.apply(null, Array(13)).map(function (_, i) {
                    return i;
                });

                $.each(sizes, function (i, size) {
                    $.each(ranges, function (j, range) {
                        sizes[i]['col-' + i + '-' + range] = mapper[j] + ' - ' + Math.round(range / 12 * 100) + '%';
                        /*'col-' + i + '-' + range;*/
                    });
                });

                return sizes;
            },
            availableOffsets: function () {
                var sizes = {'xs': {}, 'sm': {}, 'md': {}, 'lg': {}, 'xl': {}};
                var mapper = this.getResponsiveMapper();
                var ranges = Array.apply(null, Array(13)).map(function (_, i) {
                    return i;
                });

                $.each(sizes, function (i, size) {
                    $.each(ranges, function (j, range) {
                        sizes[i]['col-' + i + '-offset-' + range] = mapper[j] + ' - ' + Math.round(range / 12 * 100) + '%';
                        /*'col-' + i + '-offset-' + range;*/
                    });
                });

                return sizes;
            },
            backgroundImageUploadUrl: function () {
                if (!this.action) {
                    return;
                }
                return utils.url('@pckg.generic.pageStructure.actionsMorphBackgroundImage', {actionsMorph: this.action.id});
            },
            actionParent: function () {
                if (!this.action) {
                    return null;
                }

                return $store.getters.actionParent(this.action.id);
            },
            actionChildren: function () {
                if (!this.action) {
                    return [];
                }

                return $store.getters.actionChildren(this.action.id);
            }
        }
    });
</script>