<script type="text/x-template" id="vue-pckg-select">
    <div class="pckg-select" :class="styleClass">
        <select v-if="multiple" class="form-control" multiple v-model="selectedMultiple">
            <option v-for="(option, key) in finalOptions" :value="key" v-html="option"></option>
            <optgroup v-for="(optgroup, label) in finalOptionGroups" :label="label">
                <option v-for="(option, key) in optgroup" :value="key" v-html="option"></option>
            </optgroup>
        </select>
        <select v-else class="form-control" v-model="selectedSingle">
            <option v-for="(option, key) in finalOptions" :value="key" v-html="option"></option>
            <optgroup v-for="(optgroup, label) in finalOptionGroups" :label="label">
                <option v-for="(option, key) in optgroup" :value="key" v-html="option"></option>
            </optgroup>
        </select>
    </div>
</script>

<script>

    Vue.component('pckg-select', {
        mixins: [pckgDelimiters, pckgTimeout],
        name: 'pckg-select',
        template: '#vue-pckg-select',
        model: {
            prop: 'selected',
            event: 'input'
        },
        data: function () {
            return {
                options: this.initialOptions,
                selectedMultiple: Array.isArray(this.selected) ? this.selected : [this.selected],
                selectedSingle: this.selected
            };
        },
        props: {
            withEmpty: {
                default: true
            },
            initialOptions: {
                default: function () {
                    return [];
                }
            },
            selected: {
                default: function () {
                    return [];
                }
            },
            initialMultiple: {
                default: true,
                type: Boolean
            },
            refreshUrl: {
                type: String,
                default: ''
            },
            styleClass: {
                default: 'narrow',
                type: String
            }
        },
        computed: {
            finalOptions: function () {
                var options = {'': ' -- select value -- '};

                $.each(this.options, function (key, item) {
                    if (typeof item != 'string') {
                        return;
                    }

                    options[key] = item;
                });

                return options;
            },
            finalOptionGroups: function () {
                var options = {};
                $.each(this.options, function (key, item) {
                    if (typeof item == 'string') {
                        return;
                    }

                    options[key] = item;
                });

                return options;
            },
            multiple: function () {
                return this.initialMultiple;
            }
        },
        watch: {
            selected: function (newVal, oldVal) {
                console.log("selected changed", newVal);
                this.refreshPicker(newVal);
            },
            selectedMultiple: function (newVal) {
                console.log("selectedMultiple changed", newVal);
                this.refreshPicker(newVal);
            },
            selectedSingle: function (newVal) {
                console.log("selectedSingle changed", newVal);
                this.refreshPicker(newVal);
            },
            options: function (newVal) {
                console.log('options watcher: options changed');
                Vue.nextTick(function () {
                    console.log('refreshing selectpicker');
                    $(this.$el).find('select').selectpicker('refresh');
                }.bind(this));
            }
        },
        methods: {
            changed: function(){
                console.log('pckg select changed: ' + this.selected);
                this.refreshPicker(this.selected);
            },
            refreshPicker: function (val) {
                console.log('emiting: ' + val);
                this.$emit('input', val);
                $(this.$el).find('select').trigger('vue.change', val);
            },
            refreshList: function () {
                this.timeout('refreshList', function () {
                    if (this.refreshUrl.length == 0) {
                        console.log("no refresh url");
                        return;
                    }

                    http.getJSON(this.refreshUrl + '?search=' + $(this.$el).find('.bs-searchbox input').val(), function (data) {
                        this.options = data.records;
                    }.bind(this));
                }.bind(this), 333);
            },
            initPicker: function(){
                $(this.$el).find('select').selectpicker({
                    liveSearch: true
                });

                $(this.$el).find('select').selectpicker('refresh');

                $(document).ready(function(){
                    $(this.$el).find('select').on('change', function () {
                        this.$nextTick(function(){
                            console.log('changing js and emiting:', $(this.$el).find('select').val());
                            this.$emit('input', $(this.$el).find('select').val());
                        }.bind(this));
                    }.bind(this));
                }.bind(this));

                $(this.$el).find('.bs-searchbox input').on('keyup', function () {
                    this.refreshList();
                }.bind(this));
            }
        },
        mounted: function () {
            this.$nextTick(this.initPicker);

            /**
             * Initial fetch.
             */
            if ((!this.options || this.options.length == 0) && (!this.refreshUrl || this.refreshUrl.length > 0)) {
                this.refreshList();
            }
        }
    });
</script>